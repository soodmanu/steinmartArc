(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.index = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/*
 * This custom function was generated by the Actions Generator
 * in order to enable the other custom functions in this app
 * upon installation into a tenant.
 */

var ActionInstaller = require('mozu-action-helpers/installers/actions');
var EntityListClient = require("mozu-node-sdk/clients/platform/entityList");
var EntityClient = require("mozu-node-sdk/clients/platform/entitylists/entity");
var constants = require("mozu-node-sdk/constants");
var paymentConstants = require("../../paypal/constants");
var helper = require("../../paypal/helper");
var _ = require("underscore");
var async = require('async');



var paypalEntityListName = 'paypalrequest';
var paypalEntityStructure = {
    'name': paypalEntityListName,
    'contextLevel': 'catalog',
    'nameSpace': 'STEINMART',
    'useSystemAssignedId': 'false',
    "idProperty": {
        "propertyName": "id",
        "dataType": "string"
    },
    "isVisibleInStorefront": "false",
    "isLocaleSpecific": "false",
    "isShopperSpecific": "false",
    "isSandboxDataCloningSupported": "true",
    "usages": ["siteBuilder", "entityManager"],
    "indexA": {
        "dataType": "string",
        "propertyName": "id"
    },
    "indexB": {
        "dataType": "string",
        "propertyName": "requestID"
    },
    "views": [{
        "name": "Default",
        "usages": ["siteBuilder", "entityManager"],
        "fields": [{
            "name": "amount",
            "target": "amount",
            "type": "string"
        },{
            "name": "requestID",
            "target": "requestID",
            "type": "string"
        }]
    }]
};




function AppInstall(context, callback) {
    var self = this;
    self.ctx = context;
    self.cb = callback;

    self.initialize = function () {
        console.log(context);
        console.log("Getting tenant", self.ctx.apiContext.tenantId);
        var tenant = context.get.tenant();
        //enablePaypalExpressWorkflow(tenant);
    };

    function enablePaypalExpressWorkflow(tenant) {

        try {
            console.log("Installing PayPal Express payment settings", tenant);
            var tasks = tenant.sites.map(function (site) {
                return addUpdatePaymentSettings(context, site);
            });
            Promise.all(tasks).then(function (result) {
                console.log("PayPal Express payment definition installed");
                //addCustomRoutes(context, tenant);
            }, function (error) {
                self.cb(error);
            });
        } catch (e) {
            console.error("Paypal install error", e);
            self.cb(e);
        }
    }

    function addCustomRoutes(context, tenant) {
        var tasks = tenant.sites.map(
            function (site) {
                var customRoutesApi = require("mozu-node-sdk/clients/commerce/settings/general/customRouteSettings")();
                customRoutesApi.context[constants.headers.SITE] = site.id;
                return customRoutesApi.getCustomRouteSettings().then(
                    function (customRoutes) {
                        return appUpdateCustomRoutes(customRoutesApi, customRoutes);
                    },
                    function (err) {
                        console.log("custom routes get error", err);
                        return appUpdateCustomRoutes(customRoutesApi, { routes: [] });
                    }
                );
            }
        );

        Promise.all(tasks).then(function (result) {
            console.log("PayPal Express custom route installed");
            enableActions(context, tenant);
        }, function (error) {
            self.cb(error);
        });
    }

    function appUpdateCustomRoutes(customRoutesApi, customRoutes) {
        console.log(customRoutes);
        console.log("route array size", _.size(customRoutes.routes));
        //Add / Update custom routes for paypal
        customRoutes = getRoutes(customRoutes, "paypal/token", "paypalToken");
        customRoutes = getRoutes(customRoutes, "paypal/checkout", "paypalProcessor");
        
        return customRoutesApi.updateCustomRouteSettings(customRoutes);
    }

    function addUpdatePaymentSettings(context, site) {
        console.log("Adding payment settings for site", site.id);
        var paymentSettingsClient = require("mozu-node-sdk/clients/commerce/settings/checkout/paymentSettings")();
        paymentSettingsClient.context[constants.headers.SITE] = site.id;
        //GetExisting
        var paymentDef = getPaymentDef();
        return paymentSettingsClient.getThirdPartyPaymentWorkflowWithValues({ fullyQualifiedName: paymentDef.namespace + "~" + paymentDef.name })
            .then(function (paymentSettings) {
                return updateThirdPartyPaymentWorkflow(paymentSettingsClient, paymentSettings);
            }, function (err) {
                return paymentSettingsClient.addThirdPartyPaymentWorkflow(paymentDef);
            });
    }

    function updateThirdPartyPaymentWorkflow(paymentSettingsClient, existingSettings) {
        var paymentDef = getPaymentDef(existingSettings);
        console.log(paymentDef);
        paymentDef.isEnabled = existingSettings.isEnabled;
        return paymentSettingsClient.deleteThirdPartyPaymentWorkflow({ "fullyQualifiedName": paymentDef.namespace + "~" + paymentDef.name })
            .then(function (result) {
                return paymentSettingsClient.addThirdPartyPaymentWorkflow(paymentDef);
            });
    }

    /*function enableActions() {
        console.log("installing code actions");
        var installer = new ActionInstaller({ context: self.ctx.apiContext });
        installer.enableActions(self.ctx, null, {
            "paypalPaymentActionBefore": function (settings) {
                settings = settings || {};
                settings.configuration = settings.configuration || {"gsiURL":"https://fcs.gsipartners.com/eb2c/CartSupportServices/giftcardAuth.wsdl?wsdl","gsiStoreCode":"CTS","gsiCredential":"use_password"};
                settings.timeoutMilliseconds = settings.timeoutMilliseconds || 30000;
                return settings;
            },
            "checkRadialBalance": function (settings) {
                settings = settings || {};
                settings.configuration = settings.configuration || {"gsiURL":"https://fcs.gsipartners.com/eb2c/CartSupportServices/giftcardAuth.wsdl?wsdl","gsiStoreCode":"CTS","gsiCredential":"use_password"};
                settings.timeoutMilliseconds = settings.timeoutMilliseconds || 30000;
                return settings;
            },
            "http.commerce.catalog.storefront.tax.estimateTaxes.after": function (settings) {
                settings = settings || {};
                settings.configuration = settings.configuration || {"gsiURL":"https://fcs-uat01.uat.gsipartners.com/eb2c/CartSupportServices/taxAndShipService.wsdl?wsdl","gsiStoreCode":"CTS","gsiCredential":"use_password"};
                settings.timeoutMilliseconds = settings.timeoutMilliseconds || 30000;
                return settings;
            },
            "http.commerce.catalog.storefront.productsearch.search.after": function (settings) {
                settings = settings || {};
                return settings;
            },
            "http.storefront.pages.global.request.after": function (settings) {
                settings = settings || {};
                return settings;
            },
            "http.storefront.pages.search.request.after": function (settings) {
                settings = settings || {};
                return settings;
            },
            "http.storefront.pages.productDetails.request.before": function (settings) {
                settings = settings || {};
                return settings;
            },
            "http.storefront.pages.productDetails.request.after": function (settings) {
                settings = settings || {};
                return settings;
            },
            "embedded.commerce.payments.action.performPaymentInteraction": function (settings) {
                settings = settings || {};
                settings.timeoutMilliseconds = settings.timeoutMilliseconds || 30000;
                return settings;
            },
            "paypalValidator": function (settings) {
                settings = settings || {};
                return settings;
            },
            "paypalProcessor": function (settings) {
                settings = settings || {};
                settings.timeoutMilliseconds = settings.timeoutMilliseconds || 30000;
                settings.configuration = settings.configuration || { "addBillingInfo": true, "missingLastNameValue": "N/A", "allowWarmCheckout": true };
                return settings;
            },
            "registerUser": function (settings) {
                settings = settings || {};
                settings.timeoutMilliseconds = settings.timeoutMilliseconds || 30000;
                settings.configuration = settings.configuration || {"url":"https://offers.christmastreeshops.com/SignupWidget/api/signup/CTSAPI","authToken":"7D620C20-C5B5-43E5-BBB0-385CA016EF3A"};
                return settings;
            },
            "paypalToken": function (settings) {
                settings = settings || {};
                settings.timeoutMilliseconds = settings.timeoutMilliseconds || 30000;
                return settings;
            },
            "http.storefront.pages.checkout.request.after": function (settings) {
                settings = settings || {};
                settings.timeoutMilliseconds = settings.timeoutMilliseconds || 30000;
                return settings;
            }

        }).then(self.cb.bind(null, null), self.cb);
    }*/


    function getPaymentDef(existingSettings) {
        return {
            "name": paymentConstants.PAYMENTSETTINGID,
            "namespace": context.get.nameSpace(),
            "isEnabled": "false",
            "description": "<div style='font-size:13px;font-style:italic'>Radial Pay Pal Service</div>",
            "credentials": [
                getPaymentActionFieldDef("Environment", paymentConstants.ENVIRONMENT, "RadioButton", false, getEnvironmentVocabularyValues(), existingSettings),
                getPaymentActionFieldDef("Radial End Point URL", paymentConstants.PAYPALENDPOINTURL, "TextBox", false, null, existingSettings),
                getPaymentActionFieldDef("Radial Paypal API key", paymentConstants.PAYPALAPIKEY, "TextBox", false, null, existingSettings)
            ]
        };
    }

    function getEnvironmentVocabularyValues() {
        return [
            getVocabularyContent("production", "en-US", "Production"),
            getVocabularyContent("sandbox", "en-US", "Sandbox")
        ];
    }

    function getVocabularyContent(key, localeCode, value) {
        return {
            "key": key,
            "contents": [{
                "localeCode": localeCode,
                "value": value
            }]
        };
    }

    function getPaymentActionFieldDef(displayName, key, type, isSensitive, vocabularyValues, existingSettings) {
        value = "";
        if (existingSettings)
            value = helper.getValue(existingSettings, key);

        return {
            "displayName": displayName,
            "apiName": key,
            "inputType": type,
            "isSensitive": isSensitive,
            "vocabularyValues": vocabularyValues,
            "value": value
        };
    }


    function getRoutes(customRoutes, template, action) {
        var route = {
            "template": template,
            "internalRoute": "Arcjs",
            "functionId": action,
        };

        var index = _.findIndex(customRoutes.routes, function (route) { return route.functionId == action; });
        if (index <= -1)
            customRoutes.routes[_.size(customRoutes.routes)] = route;
        else
            customRoutes.routes[index] = route;

        return customRoutes;

    }
}

module.exports = function (context, callback) {
    console.log("Install initiated");
    var entitityListClient = EntityListClient(context);
    entitityListClient.context['user-claims'] = null;

    var entityClient = EntityClient(context);
    entityClient.context['user-claims'] = null;

    console.log("Installing applications");

    async.series([
        
        function (call) {
            // do some stuff ...
            entitityListClient.createEntityList(paypalEntityStructure).then(function (res) {
                console.log("paypal created : " + JSON.stringify(res));
                call(null, 'paypal');
            }, function (e) {
                call(null, null);
            });
        },
        function (call) {
            try {
                var appInstall = new AppInstall(context, callback);
                appInstall.initialize();
            } catch (e) {
                call(e);
            }
        }
    ],
        // optional callback
        function (err, results) {
            // results is now equal to ['one', 'three', 'two']
            console.log("Final results :" + results);
            callback();
        });
};
},{"../../paypal/constants":2,"../../paypal/helper":3,"async":5,"mozu-action-helpers/installers/actions":8,"mozu-node-sdk/clients/commerce/settings/checkout/paymentSettings":15,"mozu-node-sdk/clients/commerce/settings/general/customRouteSettings":16,"mozu-node-sdk/clients/platform/entityList":17,"mozu-node-sdk/clients/platform/entitylists/entity":18,"mozu-node-sdk/constants":21,"underscore":46}],2:[function(require,module,exports){
module.exports = {
	PAYMENTSETTINGID : "PayPalExpress2",
	ENVIRONMENT: "environment",
	PAYPALENDPOINTURL: "Radial End point URL",
	PAYPALAPIKEY: "Radial Api Key",
	CAPTUREONSUBMIT: "AuthAndCaptureOnOrderPlacement",
	CAPTUREONSHIPMENT: "AuthOnOrderPlacementAndCaptureOnOrderShipment",
	FAILED: "Failed",
	NEW: "New",
	DECLINED: "Declined",
	AUTHORIZED: "Authorized",
	CAPTURED: "Captured",
	CREDITED: "Credited",
	CREDITPENDING: "CreditPending",
	VOIDED: "Voided"
};
},{}],3:[function(require,module,exports){

var getAppInfo = require('mozu-action-helpers/get-app-info');
var url = require("url");
var qs = require("querystring");
var paymentConstants = require("./constants");
var _ = require("underscore");
var constants = require("mozu-node-sdk/constants");
var Order = require("mozu-node-sdk/clients/commerce/order");
var Checkout = require("mozu-node-sdk/clients/commerce/checkout");
var Cart = require("mozu-node-sdk/clients/commerce/cart")();

var helper = module.exports = {
	createClientFromContext: function (client, context, removeClaims) {
	  var c = client(context);
	  if (removeClaims)
		  c.context[constants.headers.USERCLAIMS] = null;
	  return c;
	},
	isTokenRequest: function(context) {
		 return context.request.url.indexOf("/paypal/token") > -1;
	},
	isCartPage: function(context) {
		return context.request.url.indexOf("/cart") > -1;
	},
	isCheckoutPage: function(context) {
		return context.request.url.indexOf("/checkout") > -1;
	},
	parseHref: function(context) {
		var urlParseResult = url.parse(context.request.href);
		return urlParseResult;
	},
	parseUrl: function(context) {
		var self = this;
		var urlParseResult = url.parse(context.request.url);
		queryStringParams = qs.parse(urlParseResult.query);
		return queryStringParams;
	},
	isPayPalCheckout: function(context) {
		var queryString = this.parseUrl(context);
		return (queryString.PayerID !== "" &&
			queryString.token !== "" && queryString.id !== ""  );
	},
	getPaymentFQN: function(context) {
		var appInfo = getAppInfo(context);
		return appInfo.namespace+"~"+paymentConstants.PAYMENTSETTINGID;
	},
	getValue: function(paymentSetting,  key) {
		var value = _.findWhere(paymentSetting.credentials, {"apiName" : key}) || _.findWhere(paymentSetting.Credentials, {"APIName" : key}) ;

	    if (!value) {
	      return;
	    }
	    return value.value || value.Value;
	},
	getParamsToPreserve: function(params) {
		delete params.id;
		delete params.token;
		delete params.isCart;
		delete params.PayerID;
		delete params.paypalCheckout;
    delete params.ppErrorId;
    delete params.startpaypalcheckout;
		var queryString = "";
		Object.keys(params).forEach(function(key){
			if (queryString !== "")
			queryString += "&";
			queryString += key +"=" + params[key];
		});
        return queryString;
    },
    getStoreCredits: function(order) {
		var storeCredits = _.filter(order.payments,function(payment) {return ((payment.paymentType === "StoreCredit" || payment.paymentType === "GiftCard") && payment.status != "Voided"); });
		return _.map(storeCredits , function(credit) {
						return {
							name: credit.paymentType,
							quantity: 1,
							amount: -credit.amountRequested
						};
					}) ;
	},
    getActiveDiscountItems: function(discounts) {
		var activeDiscounts = _.filter(discounts, function(discount) { return discount.excluded === false;});
		if (activeDiscounts.length === 0)
			activeDiscounts = _.filter(discounts, function(discount) { return discount.discount.excluded === false; });

		return 	_.map( activeDiscounts , function(discount) {
			return {
				name: discount.discount.name || discount.discount.discount.name,
				quantity: 1,
				amount: -discount.impact || -discount.discount.impact
			};
		});
	},
    getItems: function (order, includeStoreCredits) {
    	var self = this;
		var items=	_.map(order.items, function(item) {
			return 	{
				name: item.product.name,
				quantity: item.quantity,
				amount: parseFloat(item.discountedTotal/item.quantity).toFixed(2),
				lineId: item.lineId//,
				//taxAmount: item.itemTaxTotal
			};
		});

		if (order.orderDiscounts) {
			items = _.union(items, self.getActiveDiscountItems(order.orderDiscounts));
		}


		/*if (order.shippingDiscounts) {
			items = _.union(items, getActiveDiscountItems(order.shippingDiscounts));
		}*/

		if (order.handlingDiscount) {
			items = _.union(items, self.getActiveDiscountItems(order.handlingDiscount));
		}

		//if (includeStoreCredits) {
			var storeCredits = self.getStoreCredits(order);
			if (storeCredits.length > 0) {
				items = _.union(items,storeCredits);
			}
		//}

		return items;

	},
	getShippingDiscountAmount: function (order) {
		var items = this.getActiveDiscountItems(order.shippingDiscounts);
		return _.reduce(items, function(sum, item) {return sum+item.amount;},0);
	},
	getOrderDetails: function(order, includeShipping, paymentAction) {
		var self = this;
		var orderDetails = {
			taxAmount: order.taxTotal || (((order.itemTaxTotal + order.shippingTaxTotal + order.handlingTaxTotal+0.00001) * 100) / 100),
			handlingAmount: order.handlingTotal,
			shippingAmount: order.shippingSubTotal,
			originalCartId: order.originalCartId,
			shippingDiscount: self.getShippingDiscountAmount(order),
			items: self.getItems(order, false)
		};

    	if (order.dutyTotal)
      		orderDetails.handlingAmount = (((orderDetails.handlingAmount + order.dutyTotal) * 100) / 100);

		if (paymentAction) {
			orderDetails.amount = paymentAction.amount;
			orderDetails.currencyCode = paymentAction.currencyCode;
			orderDetails.orderNumber = order.orderNumber || order.number;
		} else {
			var storeCredits = self.getStoreCredits(order);
			var storeCreditTotal = _.reduce(storeCredits, function(sum, item) {return sum+item.amount;},0);
			orderDetails.amount = ((((order.total+storeCreditTotal)+0.00001) * 100) / 100);
			orderDetails.currencyCode = order.currencyCode;
		}

		if (includeShipping)
			orderDetails.email = order.email;

		var hasNonDigital = _.find(order.items, function(item) { return item.fulfillmentMethod !== "Digital";});

		if (hasNonDigital) {
			var contact = null;

			if (order.fulfillmentInfo  && order.fulfillmentInfo.fulfillmentContact && includeShipping) {
				contact = order.fulfillmentInfo.fulfillmentContact;
			}  else if (order.destinations) {
				var itemDestinations = _.pluck(order.items,"destinationId");
				itemDestinations = _.uniq(itemDestinations);
				if (itemDestinations.length == 1) {
					var destination = _.find(order.destinations, function(destination) { return destination.id == itemDestinations[0];});
					if (destination)
						contact = destination.destinationContact;
				}
			}

			if (contact) {
				
				orderDetails.shippingAddress = {
					firstName: contact.firstName,
					lastName: contact.lastNameOrSurname,
					address1: contact.address.address1,
					address2: contact.address.address2,
					cityOrTown: contact.address.cityOrTown,
					stateOrProvince: contact.address.stateOrProvince,
					postalOrZipCode: contact.address.postalOrZipCode,
					countryCode: contact.address.countryCode,
					phone: (contact.phoneNumbers ? contact.phoneNumbers.home : "")
				};
			}

			orderDetails.requiresShipping = true;
		} else
			orderDetails.requiresShipping = false;

		//check if shipping is required
		var shipItems = _.findWhere(order.items, function(item) { return items.fulfillmentMethod === "ship"; });
		if (!shipItems)
			orderDetails.requiresShipping = false;


		return orderDetails;
	},
	getOrder: function(context, id, isCart, isMultiship) {
		if (isCart)
			return Cart.getCart({cartId: id});
		else if (!isMultiship)
			return this.createClientFromContext(Order, context, true).getOrder({orderId: id});
		else
			return this.createClientFromContext(Checkout, context, true).getCheckout({checkoutId: id});
	}
};

},{"./constants":2,"mozu-action-helpers/get-app-info":7,"mozu-node-sdk/clients/commerce/cart":12,"mozu-node-sdk/clients/commerce/checkout":13,"mozu-node-sdk/clients/commerce/order":14,"mozu-node-sdk/constants":21,"querystring":undefined,"underscore":46,"url":undefined}],4:[function(require,module,exports){
module.exports = {
  
  'embedded.platform.applications.install': {
      actionName: 'embedded.platform.applications.install',
      customFunction: require('./domains/platform.applications/embedded.platform.applications.install')
  }
};

},{"./domains/platform.applications/embedded.platform.applications.install":1}],5:[function(require,module,exports){
/*!
 * async
 * https://github.com/caolan/async
 *
 * Copyright 2010-2014 Caolan McMahon
 * Released under the MIT license
 */
(function () {

    var async = {};
    function noop() {}
    function identity(v) {
        return v;
    }
    function toBool(v) {
        return !!v;
    }
    function notId(v) {
        return !v;
    }

    // global on the server, window in the browser
    var previous_async;

    // Establish the root object, `window` (`self`) in the browser, `global`
    // on the server, or `this` in some virtual machines. We use `self`
    // instead of `window` for `WebWorker` support.
    var root = typeof self === 'object' && self.self === self && self ||
            typeof global === 'object' && global.global === global && global ||
            this;

    if (root != null) {
        previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        return function() {
            if (fn === null) throw new Error("Callback was already called.");
            fn.apply(this, arguments);
            fn = null;
        };
    }

    function _once(fn) {
        return function() {
            if (fn === null) return;
            fn.apply(this, arguments);
            fn = null;
        };
    }

    //// cross-browser compatiblity functions ////

    var _toString = Object.prototype.toString;

    var _isArray = Array.isArray || function (obj) {
        return _toString.call(obj) === '[object Array]';
    };

    // Ported from underscore.js isObject
    var _isObject = function(obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj;
    };

    function _isArrayLike(arr) {
        return _isArray(arr) || (
            // has a positive integer length property
            typeof arr.length === "number" &&
            arr.length >= 0 &&
            arr.length % 1 === 0
        );
    }

    function _arrayEach(arr, iterator) {
        var index = -1,
            length = arr.length;

        while (++index < length) {
            iterator(arr[index], index, arr);
        }
    }

    function _map(arr, iterator) {
        var index = -1,
            length = arr.length,
            result = Array(length);

        while (++index < length) {
            result[index] = iterator(arr[index], index, arr);
        }
        return result;
    }

    function _range(count) {
        return _map(Array(count), function (v, i) { return i; });
    }

    function _reduce(arr, iterator, memo) {
        _arrayEach(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    }

    function _forEachOf(object, iterator) {
        _arrayEach(_keys(object), function (key) {
            iterator(object[key], key);
        });
    }

    function _indexOf(arr, item) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] === item) return i;
        }
        return -1;
    }

    var _keys = Object.keys || function (obj) {
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    function _keyIterator(coll) {
        var i = -1;
        var len;
        var keys;
        if (_isArrayLike(coll)) {
            len = coll.length;
            return function next() {
                i++;
                return i < len ? i : null;
            };
        } else {
            keys = _keys(coll);
            len = keys.length;
            return function next() {
                i++;
                return i < len ? keys[i] : null;
            };
        }
    }

    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
    // This accumulates the arguments passed into an array, after a given index.
    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
    function _restParam(func, startIndex) {
        startIndex = startIndex == null ? func.length - 1 : +startIndex;
        return function() {
            var length = Math.max(arguments.length - startIndex, 0);
            var rest = Array(length);
            for (var index = 0; index < length; index++) {
                rest[index] = arguments[index + startIndex];
            }
            switch (startIndex) {
                case 0: return func.call(this, rest);
                case 1: return func.call(this, arguments[0], rest);
            }
            // Currently unused but handle cases outside of the switch statement:
            // var args = Array(startIndex + 1);
            // for (index = 0; index < startIndex; index++) {
            //     args[index] = arguments[index];
            // }
            // args[startIndex] = rest;
            // return func.apply(this, args);
        };
    }

    function _withoutIndex(iterator) {
        return function (value, index, callback) {
            return iterator(value, callback);
        };
    }

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////

    // capture the global reference to guard against fakeTimer mocks
    var _setImmediate = typeof setImmediate === 'function' && setImmediate;

    var _delay = _setImmediate ? function(fn) {
        // not a direct alias for IE10 compatibility
        _setImmediate(fn);
    } : function(fn) {
        setTimeout(fn, 0);
    };

    if (typeof process === 'object' && typeof process.nextTick === 'function') {
        async.nextTick = process.nextTick;
    } else {
        async.nextTick = _delay;
    }
    async.setImmediate = _setImmediate ? _delay : async.nextTick;


    async.forEach =
    async.each = function (arr, iterator, callback) {
        return async.eachOf(arr, _withoutIndex(iterator), callback);
    };

    async.forEachSeries =
    async.eachSeries = function (arr, iterator, callback) {
        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
    };


    async.forEachLimit =
    async.eachLimit = function (arr, limit, iterator, callback) {
        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
    };

    async.forEachOf =
    async.eachOf = function (object, iterator, callback) {
        callback = _once(callback || noop);
        object = object || [];

        var iter = _keyIterator(object);
        var key, completed = 0;

        while ((key = iter()) != null) {
            completed += 1;
            iterator(object[key], key, only_once(done));
        }

        if (completed === 0) callback(null);

        function done(err) {
            completed--;
            if (err) {
                callback(err);
            }
            // Check key is null in case iterator isn't exhausted
            // and done resolved synchronously.
            else if (key === null && completed <= 0) {
                callback(null);
            }
        }
    };

    async.forEachOfSeries =
    async.eachOfSeries = function (obj, iterator, callback) {
        callback = _once(callback || noop);
        obj = obj || [];
        var nextKey = _keyIterator(obj);
        var key = nextKey();
        function iterate() {
            var sync = true;
            if (key === null) {
                return callback(null);
            }
            iterator(obj[key], key, only_once(function (err) {
                if (err) {
                    callback(err);
                }
                else {
                    key = nextKey();
                    if (key === null) {
                        return callback(null);
                    } else {
                        if (sync) {
                            async.setImmediate(iterate);
                        } else {
                            iterate();
                        }
                    }
                }
            }));
            sync = false;
        }
        iterate();
    };



    async.forEachOfLimit =
    async.eachOfLimit = function (obj, limit, iterator, callback) {
        _eachOfLimit(limit)(obj, iterator, callback);
    };

    function _eachOfLimit(limit) {

        return function (obj, iterator, callback) {
            callback = _once(callback || noop);
            obj = obj || [];
            var nextKey = _keyIterator(obj);
            if (limit <= 0) {
                return callback(null);
            }
            var done = false;
            var running = 0;
            var errored = false;

            (function replenish () {
                if (done && running <= 0) {
                    return callback(null);
                }

                while (running < limit && !errored) {
                    var key = nextKey();
                    if (key === null) {
                        done = true;
                        if (running <= 0) {
                            callback(null);
                        }
                        return;
                    }
                    running += 1;
                    iterator(obj[key], key, only_once(function (err) {
                        running -= 1;
                        if (err) {
                            callback(err);
                            errored = true;
                        }
                        else {
                            replenish();
                        }
                    }));
                }
            })();
        };
    }


    function doParallel(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOf, obj, iterator, callback);
        };
    }
    function doParallelLimit(fn) {
        return function (obj, limit, iterator, callback) {
            return fn(_eachOfLimit(limit), obj, iterator, callback);
        };
    }
    function doSeries(fn) {
        return function (obj, iterator, callback) {
            return fn(async.eachOfSeries, obj, iterator, callback);
        };
    }

    function _asyncMap(eachfn, arr, iterator, callback) {
        callback = _once(callback || noop);
        arr = arr || [];
        var results = _isArrayLike(arr) ? [] : {};
        eachfn(arr, function (value, index, callback) {
            iterator(value, function (err, v) {
                results[index] = v;
                callback(err);
            });
        }, function (err) {
            callback(err, results);
        });
    }

    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = doParallelLimit(_asyncMap);

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.inject =
    async.foldl =
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachOfSeries(arr, function (x, i, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };

    async.foldr =
    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, identity).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };

    async.transform = function (arr, memo, iterator, callback) {
        if (arguments.length === 3) {
            callback = iterator;
            iterator = memo;
            memo = _isArray(arr) ? [] : {};
        }

        async.eachOf(arr, function(v, k, cb) {
            iterator(memo, v, k, cb);
        }, function(err) {
            callback(err, memo);
        });
    };

    function _filter(eachfn, arr, iterator, callback) {
        var results = [];
        eachfn(arr, function (x, index, callback) {
            iterator(x, function (v) {
                if (v) {
                    results.push({index: index, value: x});
                }
                callback();
            });
        }, function () {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    }

    async.select =
    async.filter = doParallel(_filter);

    async.selectLimit =
    async.filterLimit = doParallelLimit(_filter);

    async.selectSeries =
    async.filterSeries = doSeries(_filter);

    function _reject(eachfn, arr, iterator, callback) {
        _filter(eachfn, arr, function(value, cb) {
            iterator(value, function(v) {
                cb(!v);
            });
        }, callback);
    }
    async.reject = doParallel(_reject);
    async.rejectLimit = doParallelLimit(_reject);
    async.rejectSeries = doSeries(_reject);

    function _createTester(eachfn, check, getResult) {
        return function(arr, limit, iterator, cb) {
            function done() {
                if (cb) cb(getResult(false, void 0));
            }
            function iteratee(x, _, callback) {
                if (!cb) return callback();
                iterator(x, function (v) {
                    if (cb && check(v)) {
                        cb(getResult(true, x));
                        cb = iterator = false;
                    }
                    callback();
                });
            }
            if (arguments.length > 3) {
                eachfn(arr, limit, iteratee, done);
            } else {
                cb = iterator;
                iterator = limit;
                eachfn(arr, iteratee, done);
            }
        };
    }

    async.any =
    async.some = _createTester(async.eachOf, toBool, identity);

    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);

    async.all =
    async.every = _createTester(async.eachOf, notId, notId);

    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);

    function _findGetResult(v, x) {
        return x;
    }
    async.detect = _createTester(async.eachOf, identity, _findGetResult);
    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                callback(null, _map(results.sort(comparator), function (x) {
                    return x.value;
                }));
            }

        });

        function comparator(left, right) {
            var a = left.criteria, b = right.criteria;
            return a < b ? -1 : a > b ? 1 : 0;
        }
    };

    async.auto = function (tasks, concurrency, callback) {
        if (typeof arguments[1] === 'function') {
            // concurrency is optional, shift the args.
            callback = concurrency;
            concurrency = null;
        }
        callback = _once(callback || noop);
        var keys = _keys(tasks);
        var remainingTasks = keys.length;
        if (!remainingTasks) {
            return callback(null);
        }
        if (!concurrency) {
            concurrency = remainingTasks;
        }

        var results = {};
        var runningTasks = 0;

        var hasError = false;

        var listeners = [];
        function addListener(fn) {
            listeners.unshift(fn);
        }
        function removeListener(fn) {
            var idx = _indexOf(listeners, fn);
            if (idx >= 0) listeners.splice(idx, 1);
        }
        function taskComplete() {
            remainingTasks--;
            _arrayEach(listeners.slice(0), function (fn) {
                fn();
            });
        }

        addListener(function () {
            if (!remainingTasks) {
                callback(null, results);
            }
        });

        _arrayEach(keys, function (k) {
            if (hasError) return;
            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
            var taskCallback = _restParam(function(err, args) {
                runningTasks--;
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _forEachOf(results, function(val, rkey) {
                        safeResults[rkey] = val;
                    });
                    safeResults[k] = args;
                    hasError = true;

                    callback(err, safeResults);
                }
                else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            });
            var requires = task.slice(0, task.length - 1);
            // prevent dead-locks
            var len = requires.length;
            var dep;
            while (len--) {
                if (!(dep = tasks[requires[len]])) {
                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));
                }
                if (_isArray(dep) && _indexOf(dep, k) >= 0) {
                    throw new Error('Has cyclic dependencies');
                }
            }
            function ready() {
                return runningTasks < concurrency && _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            }
            if (ready()) {
                runningTasks++;
                task[task.length - 1](taskCallback, results);
            }
            else {
                addListener(listener);
            }
            function listener() {
                if (ready()) {
                    runningTasks++;
                    removeListener(listener);
                    task[task.length - 1](taskCallback, results);
                }
            }
        });
    };



    async.retry = function(times, task, callback) {
        var DEFAULT_TIMES = 5;
        var DEFAULT_INTERVAL = 0;

        var attempts = [];

        var opts = {
            times: DEFAULT_TIMES,
            interval: DEFAULT_INTERVAL
        };

        function parseTimes(acc, t){
            if(typeof t === 'number'){
                acc.times = parseInt(t, 10) || DEFAULT_TIMES;
            } else if(typeof t === 'object'){
                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
            } else {
                throw new Error('Unsupported argument type for \'times\': ' + typeof t);
            }
        }

        var length = arguments.length;
        if (length < 1 || length > 3) {
            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
        } else if (length <= 2 && typeof times === 'function') {
            callback = task;
            task = times;
        }
        if (typeof times !== 'function') {
            parseTimes(opts, times);
        }
        opts.callback = callback;
        opts.task = task;

        function wrappedTask(wrappedCallback, wrappedResults) {
            function retryAttempt(task, finalAttempt) {
                return function(seriesCallback) {
                    task(function(err, result){
                        seriesCallback(!err || finalAttempt, {err: err, result: result});
                    }, wrappedResults);
                };
            }

            function retryInterval(interval){
                return function(seriesCallback){
                    setTimeout(function(){
                        seriesCallback(null);
                    }, interval);
                };
            }

            while (opts.times) {

                var finalAttempt = !(opts.times-=1);
                attempts.push(retryAttempt(opts.task, finalAttempt));
                if(!finalAttempt && opts.interval > 0){
                    attempts.push(retryInterval(opts.interval));
                }
            }

            async.series(attempts, function(done, data){
                data = data[data.length - 1];
                (wrappedCallback || opts.callback)(data.err, data.result);
            });
        }

        // If a callback is passed, run this as a controll flow
        return opts.callback ? wrappedTask() : wrappedTask;
    };

    async.waterfall = function (tasks, callback) {
        callback = _once(callback || noop);
        if (!_isArray(tasks)) {
            var err = new Error('First argument to waterfall must be an array of functions');
            return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        function wrapIterator(iterator) {
            return _restParam(function (err, args) {
                if (err) {
                    callback.apply(null, [err].concat(args));
                }
                else {
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    ensureAsync(iterator).apply(null, args);
                }
            });
        }
        wrapIterator(async.iterator(tasks))();
    };

    function _parallel(eachfn, tasks, callback) {
        callback = callback || noop;
        var results = _isArrayLike(tasks) ? [] : {};

        eachfn(tasks, function (task, key, callback) {
            task(_restParam(function (err, args) {
                if (args.length <= 1) {
                    args = args[0];
                }
                results[key] = args;
                callback(err);
            }));
        }, function (err) {
            callback(err, results);
        });
    }

    async.parallel = function (tasks, callback) {
        _parallel(async.eachOf, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel(_eachOfLimit(limit), tasks, callback);
    };

    async.series = function(tasks, callback) {
        _parallel(async.eachOfSeries, tasks, callback);
    };

    async.iterator = function (tasks) {
        function makeCallback(index) {
            function fn() {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            }
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        }
        return makeCallback(0);
    };

    async.apply = _restParam(function (fn, args) {
        return _restParam(function (callArgs) {
            return fn.apply(
                null, args.concat(callArgs)
            );
        });
    });

    function _concat(eachfn, arr, fn, callback) {
        var result = [];
        eachfn(arr, function (x, index, cb) {
            fn(x, function (err, y) {
                result = result.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, result);
        });
    }
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        callback = callback || noop;
        if (test()) {
            var next = _restParam(function(err, args) {
                if (err) {
                    callback(err);
                } else if (test.apply(this, args)) {
                    iterator(next);
                } else {
                    callback.apply(null, [null].concat(args));
                }
            });
            iterator(next);
        } else {
            callback(null);
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        var calls = 0;
        return async.whilst(function() {
            return ++calls <= 1 || test.apply(this, arguments);
        }, iterator, callback);
    };

    async.until = function (test, iterator, callback) {
        return async.whilst(function() {
            return !test.apply(this, arguments);
        }, iterator, callback);
    };

    async.doUntil = function (iterator, test, callback) {
        return async.doWhilst(iterator, function() {
            return !test.apply(this, arguments);
        }, callback);
    };

    async.during = function (test, iterator, callback) {
        callback = callback || noop;

        var next = _restParam(function(err, args) {
            if (err) {
                callback(err);
            } else {
                args.push(check);
                test.apply(this, args);
            }
        });

        var check = function(err, truth) {
            if (err) {
                callback(err);
            } else if (truth) {
                iterator(next);
            } else {
                callback(null);
            }
        };

        test(check);
    };

    async.doDuring = function (iterator, test, callback) {
        var calls = 0;
        async.during(function(next) {
            if (calls++ < 1) {
                next(null, true);
            } else {
                test.apply(this, arguments);
            }
        }, iterator, callback);
    };

    function _queue(worker, concurrency, payload) {
        if (concurrency == null) {
            concurrency = 1;
        }
        else if(concurrency === 0) {
            throw new Error('Concurrency must not be zero');
        }
        function _insert(q, data, pos, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if(data.length === 0 && q.idle()) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function() {
                    q.drain();
                });
            }
            _arrayEach(data, function(task) {
                var item = {
                    data: task,
                    callback: callback || noop
                };

                if (pos) {
                    q.tasks.unshift(item);
                } else {
                    q.tasks.push(item);
                }

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
            });
            async.setImmediate(q.process);
        }
        function _next(q, tasks) {
            return function(){
                workers -= 1;

                var removed = false;
                var args = arguments;
                _arrayEach(tasks, function (task) {
                    _arrayEach(workersList, function (worker, index) {
                        if (worker === task && !removed) {
                            workersList.splice(index, 1);
                            removed = true;
                        }
                    });

                    task.callback.apply(task, args);
                });
                if (q.tasks.length + workers === 0) {
                    q.drain();
                }
                q.process();
            };
        }

        var workers = 0;
        var workersList = [];
        var q = {
            tasks: [],
            concurrency: concurrency,
            payload: payload,
            saturated: noop,
            empty: noop,
            drain: noop,
            started: false,
            paused: false,
            push: function (data, callback) {
                _insert(q, data, false, callback);
            },
            kill: function () {
                q.drain = noop;
                q.tasks = [];
            },
            unshift: function (data, callback) {
                _insert(q, data, true, callback);
            },
            process: function () {
                while(!q.paused && workers < q.concurrency && q.tasks.length){

                    var tasks = q.payload ?
                        q.tasks.splice(0, q.payload) :
                        q.tasks.splice(0, q.tasks.length);

                    var data = _map(tasks, function (task) {
                        return task.data;
                    });

                    if (q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    workersList.push(tasks[0]);
                    var cb = only_once(_next(q, tasks));
                    worker(data, cb);
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            },
            workersList: function () {
                return workersList;
            },
            idle: function() {
                return q.tasks.length + workers === 0;
            },
            pause: function () {
                q.paused = true;
            },
            resume: function () {
                if (q.paused === false) { return; }
                q.paused = false;
                var resumeCount = Math.min(q.concurrency, q.tasks.length);
                // Need to call q.process once per concurrent
                // worker to preserve full concurrency after pause
                for (var w = 1; w <= resumeCount; w++) {
                    async.setImmediate(q.process);
                }
            }
        };
        return q;
    }

    async.queue = function (worker, concurrency) {
        var q = _queue(function (items, cb) {
            worker(items[0], cb);
        }, concurrency, 1);

        return q;
    };

    async.priorityQueue = function (worker, concurrency) {

        function _compareTasks(a, b){
            return a.priority - b.priority;
        }

        function _binarySearch(sequence, item, compare) {
            var beg = -1,
                end = sequence.length - 1;
            while (beg < end) {
                var mid = beg + ((end - beg + 1) >>> 1);
                if (compare(item, sequence[mid]) >= 0) {
                    beg = mid;
                } else {
                    end = mid - 1;
                }
            }
            return beg;
        }

        function _insert(q, data, priority, callback) {
            if (callback != null && typeof callback !== "function") {
                throw new Error("task callback must be a function");
            }
            q.started = true;
            if (!_isArray(data)) {
                data = [data];
            }
            if(data.length === 0) {
                // call drain immediately if there are no tasks
                return async.setImmediate(function() {
                    q.drain();
                });
            }
            _arrayEach(data, function(task) {
                var item = {
                    data: task,
                    priority: priority,
                    callback: typeof callback === 'function' ? callback : noop
                };

                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

                if (q.tasks.length === q.concurrency) {
                    q.saturated();
                }
                async.setImmediate(q.process);
            });
        }

        // Start with a normal queue
        var q = async.queue(worker, concurrency);

        // Override push to accept second parameter representing priority
        q.push = function (data, priority, callback) {
            _insert(q, data, priority, callback);
        };

        // Remove unshift function
        delete q.unshift;

        return q;
    };

    async.cargo = function (worker, payload) {
        return _queue(worker, 1, payload);
    };

    function _console_fn(name) {
        return _restParam(function (fn, args) {
            fn.apply(null, args.concat([_restParam(function (err, args) {
                if (typeof console === 'object') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _arrayEach(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            })]));
        });
    }
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        var has = Object.prototype.hasOwnProperty;
        hasher = hasher || identity;
        var memoized = _restParam(function memoized(args) {
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (has.call(memo, key)) {   
                async.setImmediate(function () {
                    callback.apply(null, memo[key]);
                });
            }
            else if (has.call(queues, key)) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([_restParam(function (args) {
                    memo[key] = args;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                        q[i].apply(null, args);
                    }
                })]));
            }
        });
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
        return function () {
            return (fn.unmemoized || fn).apply(null, arguments);
        };
    };

    function _times(mapper) {
        return function (count, iterator, callback) {
            mapper(_range(count), iterator, callback);
        };
    }

    async.times = _times(async.map);
    async.timesSeries = _times(async.mapSeries);
    async.timesLimit = function (count, limit, iterator, callback) {
        return async.mapLimit(_range(count), limit, iterator, callback);
    };

    async.seq = function (/* functions... */) {
        var fns = arguments;
        return _restParam(function (args) {
            var that = this;

            var callback = args[args.length - 1];
            if (typeof callback == 'function') {
                args.pop();
            } else {
                callback = noop;
            }

            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {
                    cb(err, nextargs);
                })]));
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        });
    };

    async.compose = function (/* functions... */) {
        return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    };


    function _applyEach(eachfn) {
        return _restParam(function(fns, args) {
            var go = _restParam(function(args) {
                var that = this;
                var callback = args.pop();
                return eachfn(fns, function (fn, _, cb) {
                    fn.apply(that, args.concat([cb]));
                },
                callback);
            });
            if (args.length) {
                return go.apply(this, args);
            }
            else {
                return go;
            }
        });
    }

    async.applyEach = _applyEach(async.eachOf);
    async.applyEachSeries = _applyEach(async.eachOfSeries);


    async.forever = function (fn, callback) {
        var done = only_once(callback || noop);
        var task = ensureAsync(fn);
        function next(err) {
            if (err) {
                return done(err);
            }
            task(next);
        }
        next();
    };

    function ensureAsync(fn) {
        return _restParam(function (args) {
            var callback = args.pop();
            args.push(function () {
                var innerArgs = arguments;
                if (sync) {
                    async.setImmediate(function () {
                        callback.apply(null, innerArgs);
                    });
                } else {
                    callback.apply(null, innerArgs);
                }
            });
            var sync = true;
            fn.apply(this, args);
            sync = false;
        });
    }

    async.ensureAsync = ensureAsync;

    async.constant = _restParam(function(values) {
        var args = [null].concat(values);
        return function (callback) {
            return callback.apply(this, args);
        };
    });

    async.wrapSync =
    async.asyncify = function asyncify(func) {
        return _restParam(function (args) {
            var callback = args.pop();
            var result;
            try {
                result = func.apply(this, args);
            } catch (e) {
                return callback(e);
            }
            // if result is Promise object
            if (_isObject(result) && typeof result.then === "function") {
                result.then(function(value) {
                    callback(null, value);
                })["catch"](function(err) {
                    callback(err.message ? err : new Error(err));
                });
            } else {
                callback(null, result);
            }
        });
    };

    // Node.js
    if (typeof module === 'object' && module.exports) {
        module.exports = async;
    }
    // AMD / RequireJS
    else if (typeof define === 'function' && define.amd) {
        define([], function () {
            return async;
        });
    }
    // included directly via <script> tag
    else {
        root.async = async;
    }

}());

},{}],6:[function(require,module,exports){
// absurdly tiny lodash dropin, to avoid large amounts of repetitive dependency

var slice = [].slice;
function assign(source) {
  slice.call(arguments, 1).forEach(function(target) {
    for (var p in target) {
      if (target.hasOwnProperty(p)) {
        source[p] = target[p];
      }
    }
  });
  return source;
}
function find(coll, pred) {
  for (var i = 0; i < coll.length; i++) {
    if (pred(coll[i])) return coll[i];
  }
}
function findWhere(coll, props) {
  return find(coll, function(item) {
    for (var p in props) {
      if (props[p] !== item[p]) {
        return false;
      }
    }
    return true;
  })
}

module.exports = {
  assign: assign,
  find: find,
  findWhere: findWhere
};

},{}],7:[function(require,module,exports){
/**
 * So far all this does is parse app key and return it, 
 * but one day it might do more.
 */

var parseAppKey = require('./parse-app-key');

module.exports = function(context) {
  return parseAppKey(context.apiContext.appKey);
};
},{"./parse-app-key":9}],8:[function(require,module,exports){
var _ = require('../endash');
var tenantExtensionsClientFactory = require(
  'mozu-node-sdk/clients/platform/tenantExtensions');

function ActionInstaller(config) {
  if (!(this instanceof ActionInstaller)) {
    return new ActionInstaller(config);
  }
  this.client = new tenantExtensionsClientFactory(config);
  this.client.context["user-claims"] = null;
}

module.exports = ActionInstaller;

ActionInstaller.prototype.enableActions =
  function(context, globalConfigurator, configurators) {
  var me = this,
    extExports = context.get.exports(),
    applicationKey = context.get.applicationKey();

  return me.client.getExtensions().then(function(enabledActions) {

    enabledActions = _.assign({
      configurations: []
    }, enabledActions);

    //add all your actions... 
    extExports.forEach(function(extExport) {
      //dont add installers.. not really actions
      if (extExport.actionId.indexOf('embedded.platform.applications') !== 0) {
        me.addCustomFunction(
          enabledActions, 
          extExport.actionId, 
          extExport.id, 
          applicationKey,
          configurators && configurators[extExport.id]
        );
      }
    });

    var appConfiguration;
    if (globalConfigurator) {
      // add custom configurations at app level
      appConfiguration = _.findWhere(enabledActions.configurations, 
                                   { applicationKey: applicationKey });
      if (!appConfiguration) {
        appConfiguration = {
          applicationKey: applicationKey,
          configuration: globalConfigurator({})
        };
        enabledActions.configurations.push(appConfiguration);
      } else {
        appConfiguration.configuration = 
          globalConfigurator(appConfiguration.configuration);
      }
    }

    return me.save(enabledActions);
  });


};

ActionInstaller.prototype.addCustomFunction =
  function(enabledActions, actionId, functionId, applicationKey, configurator) {

  var customFunctions,
    action;

  enabledActions = enabledActions || {};
  //if empty doc add actions node
  if (!enabledActions.actions) {
    enabledActions.actions = [];
  }
  //check for missing action
  
  action = _.findWhere(enabledActions.actions, { actionId: actionId });
  if (!action) {
    action = {
      'actionId': actionId,
      'contexts': []
    };
    enabledActions.actions.push(action);
  }
  action.contexts = action.contexts || [];
  if (action.contexts.length === 0) {
    action.contexts.push({
      customFunctions: []
    });
  }
  //todo allow more contexts...
  customFunctions = action.contexts[0].customFunctions;


 // var matchingFunc = findWhere(customFunctions, idProps);
  var matchingFunc = _.find( customFunctions, function(def){
      if ( def.functionId === functionId){
        //match version and package independent variations of an app key
        return (def.applicationKey||'').split('.').splice(0,2).join('.') === ( applicationKey ||'').split('.').splice(0,2).join('.') ;
      }
      return false;
  });
  

  if (!matchingFunc) {
    matchingFunc = {
      functionId: functionId,
      applicationKey: applicationKey
    };
    customFunctions.push(matchingFunc);
  }else{
    //replace the applicationKey incase of switching pacakges or upgrading version
    matchingFunc.applicationKey = applicationKey;
  }

  if (configurator) {
    _.assign(matchingFunc, configurator(matchingFunc));
  }

};

ActionInstaller.prototype.save = function(enabledActions) {
  return this.client.updateExtensions(enabledActions);
};

},{"../endash":6,"mozu-node-sdk/clients/platform/tenantExtensions":20}],9:[function(require,module,exports){
/**
 * This is a pretty naive implementation for now,
 * but since AppDev validates this pretty stringently,
 * it'll always work in the current environment (1.18).
 */

module.exports = function(key) {
  var parts = key.split('.')
  return {
    namespace: parts[0],
    id: parts[1],
    version: [parts[2],parts[3],parts[4]].join('.')
  };
}
},{}],10:[function(require,module,exports){
module.exports={
  "Production/Sandbox": {
    "homeDomain": "https://home.mozu.com",
    "paymentServiceTenantPodDomain": "https://pmts.mozu.com",
    "paymentServiceSandboxDomain": "https://payments-sb.mozu.com"
  },
  "Staging": {
    "homeDomain": "https://home.staging.mozu.com",
    "paymentServiceTenantPodDomain": "http://services.staging-hp.prod.mozu.com",
    "paymentServiceSandboxDomain": "http://services.staging-hp.prod.mozu.com"
  },
  "QA": {
    "homeDomain": "https://home.kibong-qa.com",
    "paymentServiceTenantPodDomain": "https://payments-qa.dev.volusion.com",
    "paymentServiceSandboxDomain": "https://services-sandbox-mozu-qa.dev.volusion.com"
  },
  "Kibodev01": {
    "homeDomain": "https://home.dev01.kubedev.kibo-dev.com",
    "paymentServiceTenantPodDomain": "https://home.dev01.kibo-dev.com",
    "paymentServiceSandboxDomain": "https://home.dev01.kibo-dev.com"
  },
  "SI": {
    "homeDomain": "https://home.mozu-si.com",
    "paymentServiceTenantPodDomain": "https://payments.mozu-si.com",
    "paymentServiceSandboxDomain": "https://payments.mozu-si.com"
  },
  "CI": {
    "homeDomain": "http://aus02ncrprx001.dev.volusion.com",
    "paymentServiceTenantPodDomain": "http://AUS02NCSERV001.dev.volusion.com",
    "paymentServiceSandboxDomain": "http://AUS02NCSERV001.dev.volusion.com"
  }
}

},{}],11:[function(require,module,exports){
'use strict';

var extend = require('./utils/tiny-extend'),
    _sub = require('./utils/sub'),
    constants = require('./constants'),
    makeMethod = require('./utils/make-method'),
    getConfig = require('./utils/get-config'),
    normalizeContext = require('./utils/normalize-context'),
    inMemoryAuthCache = require('./plugins/in-memory-auth-cache'),
    serverSidePrerequisites = require('./plugins/server-side-prerequisites'),
    expandUriTemplateFromContext = require('./plugins/expand-uritemplate-from-context'),
    versionKey = constants.headers.VERSION,
    version = constants.version;

var NodeDefaultPlugins = {
  authenticationStorage: inMemoryAuthCache,
  prerequisiteTasks: serverSidePrerequisites,
  urlResolver: expandUriTemplateFromContext
};

function applyDefaultPlugins(client, plugins) {
  Object.keys(plugins).forEach(function (n) {
    return client[n] = plugins[n](client);
  });
}

function makeClient(clientCls) {
  return function (cfg) {
    return new clientCls(extend({}, this, cfg));
  };
}

function cloneContext(ctx) {
  var newCtx;
  if (!ctx) return {};
  try {
    newCtx = JSON.parse(JSON.stringify(ctx));
  } catch (e) {
    throw new Error('Could not serialize context when creating Client. ' + 'Do not assign non-serializable objects to the client.context.');
  }
  newCtx[versionKey] = newCtx[versionKey] || version;
  return newCtx;
}

function isContextSufficient(context) {
  return context && context.baseUrl;
}

function Client(cfg) {
  cfg = cfg || {};
  var context = normalizeContext(cfg.apiContext || cfg.context || {});
  if (!isContextSufficient(context)) {
    context = context ? extend(getConfig(), context) : getConfig();
  }
  this.context = cloneContext(context);
  this.defaultRequestOptions = extend({}, Client.defaultRequestOptions, cfg.defaultRequestOptions);
  // apply the right default plugin config for a server-side environment
  // (that is, Node, ArcJS, or perhaps Rhino/Nashorn/WinJS)
  if (typeof process !== "undefined") {
    applyDefaultPlugins(this, NodeDefaultPlugins);
  }
  if (cfg.plugins) {
    // override plugins if necessary
    this.plugins = cfg.plugins.slice();
    this.plugins.forEach(function (p) {
      p(this);
    }.bind(this));
  }
}

// statics
extend(Client, {
  defaultRequestOptions: {},
  method: makeMethod,
  sub: function sub(methods) {
    return makeClient(_sub(Client, methods));
  },
  constants: constants
});

module.exports = Client;
},{"./constants":21,"./plugins/expand-uritemplate-from-context":22,"./plugins/in-memory-auth-cache":23,"./plugins/server-side-prerequisites":29,"./utils/get-config":33,"./utils/make-method":35,"./utils/normalize-context":36,"./utils/sub":40,"./utils/tiny-extend":42}],12:[function(require,module,exports){


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeZu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var Client = require('../../client'), constants = Client.constants;

module.exports = Client.sub({
	getCart: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/carts/{cartId}?responseFields={responseFields}'
	}),
	getOrCreateCart: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/carts/current?responseFields={responseFields}'
	}),
	getCartSummary: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/carts/summary?responseFields={responseFields}'
	}),
	getUserCartSummary: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/carts/user/{userId}/summary?responseFields={responseFields}'
	}),
	getUserCart: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/carts/user/{userId}?responseFields={responseFields}'
	}),
	rejectSuggestedDiscount: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/carts/{cartId}/rejectautodiscount/{discountId}?responseFields={responseFields}'
	}),
	updateCart: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/carts/current?responseFields={responseFields}'
	}),
	deleteCart: Client.method({
		method: constants.verbs.DELETE,
		url: '{+tenantPod}api/commerce/carts/{cartId}'
	}),
	deleteCurrentCart: Client.method({
		method: constants.verbs.DELETE,
		url: '{+tenantPod}api/commerce/carts/current'
	})
});

},{"../../client":11}],13:[function(require,module,exports){


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeZu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var Client = require('../../client'), constants = Client.constants;

module.exports = Client.sub({
	getCheckouts: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/checkouts/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&filter={filter}&q={q}&qLimit={qLimit}&responseFields={responseFields}'
	}),
	getAvailableActions: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/checkouts/{checkoutId}/actions'
	}),
	getAvailableShippingMethods: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/checkouts/{checkoutId}/shippingMethods'
	}),
	getCheckout: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/checkouts/{checkoutId}?responseFields={responseFields}'
	}),
	createCheckoutFromCart: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/checkouts/?cartId={cartId}&responseFields={responseFields}'
	}),
	performCheckoutAction: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/checkouts/{checkoutId}/actions?responseFields={responseFields}'
	}),
	resendCheckoutConfirmationEmail: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/checkouts/{checkoutId}/email/resend'
	}),
	setShippingMethods: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/checkouts/{checkoutId}/shippingMethods?responseFields={responseFields}'
	}),
	updateCheckout: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/checkouts/{checkoutId}?responseFields={responseFields}'
	}),
	processDigitalWallet: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/checkouts/{checkoutId}/digitalWallet/{digitalWalletType}?responseFields={responseFields}'
	}),
	changeCheckoutPriceList: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/checkouts/{checkoutId}/priceList?responseFields={responseFields}'
	})
});

},{"../../client":11}],14:[function(require,module,exports){


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeZu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var Client = require('../../client'), constants = Client.constants;

module.exports = Client.sub({
	getOrders: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/orders/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&filter={filter}&q={q}&qLimit={qLimit}&includeBin={includeBin}&responseFields={responseFields}'
	}),
	getAvailableActions: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/orders/{orderId}/actions'
	}),
	getTaxableOrders: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/orders/{orderId}/taxableorders'
	}),
	getOrder: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/orders/{orderId}?draft={draft}&includeBin={includeBin}&responseFields={responseFields}'
	}),
	createOrderFromCart: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/orders/?cartId={cartId}&responseFields={responseFields}'
	}),
	createOrder: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/orders/?responseFields={responseFields}'
	}),
	performOrderAction: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/orders/{orderId}/actions?responseFields={responseFields}'
	}),
	priceOrder: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/orders/price?refreshShipping={refreshShipping}&responseFields={responseFields}'
	}),
	processDigitalWallet: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/orders/{orderId}/digitalWallet/{digitalWalletType}?responseFields={responseFields}'
	}),
	updateOrderDiscount: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/orders/{orderId}/discounts/{discountId}?updatemode={updateMode}&version={version}&responseFields={responseFields}'
	}),
	deleteOrderDraft: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/orders/{orderId}/draft?version={version}'
	}),
	resendOrderConfirmationEmail: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/orders/{orderId}/email/resend'
	}),
	changeOrderPriceList: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/orders/{orderId}/priceList?updatemode={updateMode}&version={version}&responseFields={responseFields}'
	}),
	changeOrderUserId: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/orders/{orderId}/users?responseFields={responseFields}'
	}),
	updateOrder: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/orders/{orderId}?updatemode={updateMode}&version={version}&responseFields={responseFields}'
	})
});

},{"../../client":11}],15:[function(require,module,exports){


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeZu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var Client = require('../../../../client'), constants = Client.constants;

module.exports = Client.sub({
	getThirdPartyPaymentWorkflowWithValues: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/settings/checkout/paymentsettings/thirdpartyworkflow/{fullyQualifiedName}?responseFields={responseFields}'
	}),
	getThirdPartyPaymentWorkflows: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/settings/checkout/paymentsettings/thirdpartyworkflows'
	}),
	addThirdPartyPaymentWorkflow: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/settings/checkout/paymentsettings/thirdpartyworkflows'
	}),
	deleteThirdPartyPaymentWorkflow: Client.method({
		method: constants.verbs.DELETE,
		url: '{+tenantPod}api/commerce/settings/checkout/paymentsettings/thirdpartyworkflows/{fullyQualifiedName}'
	})
});

},{"../../../../client":11}],16:[function(require,module,exports){


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeZu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var Client = require('../../../../client'), constants = Client.constants;

module.exports = Client.sub({
	getCustomRouteSettings: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/commerce/settings/general/customroutes?responseFields={responseFields}'
	}),
	createCustomRouteSettings: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/commerce/settings/general/customroutes?responseFields={responseFields}'
	}),
	updateCustomRouteSettings: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/commerce/settings/general/customroutes?responseFields={responseFields}'
	}),
	deleteCustomRouteSettings: Client.method({
		method: constants.verbs.DELETE,
		url: '{+tenantPod}api/commerce/settings/general/customroutes'
	})
});

},{"../../../../client":11}],17:[function(require,module,exports){


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeZu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var Client = require('../../client'), constants = Client.constants;

module.exports = Client.sub({
	getEntityLists: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/platform/entitylists/?pageSize={pageSize}&startIndex={startIndex}&filter={filter}&sortBy={sortBy}&responseFields={responseFields}'
	}),
	getEntityList: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/platform/entitylists/{entityListFullName}?responseFields={responseFields}'
	}),
	createEntityList: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/platform/entitylists/?responseFields={responseFields}'
	}),
	updateEntityList: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/platform/entitylists/{entityListFullName}?responseFields={responseFields}'
	}),
	deleteEntityList: Client.method({
		method: constants.verbs.DELETE,
		url: '{+tenantPod}api/platform/entitylists/{entityListFullName}'
	})
});

},{"../../client":11}],18:[function(require,module,exports){


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeZu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var Client = require('../../../client'), constants = Client.constants;

module.exports = Client.sub({
	getEntity: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/platform/entitylists/{entityListFullName}/entities/{id}?responseFields={responseFields}'
	}),
	getEntities: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/platform/entitylists/{entityListFullName}/entities?pageSize={pageSize}&startIndex={startIndex}&filter={filter}&sortBy={sortBy}&responseFields={responseFields}'
	}),
	insertEntity: Client.method({
		method: constants.verbs.POST,
		url: '{+tenantPod}api/platform/entitylists/{entityListFullName}/entities/?responseFields={responseFields}'
	}),
	updateEntity: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/platform/entitylists/{entityListFullName}/entities/{id}?responseFields={responseFields}'
	}),
	deleteEntity: Client.method({
		method: constants.verbs.DELETE,
		url: '{+tenantPod}api/platform/entitylists/{entityListFullName}/entities/{id}'
	})
});

},{"../../../client":11}],19:[function(require,module,exports){


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeZu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var Client = require('../../client'), constants = Client.constants;

module.exports = Client.sub({
	getTenant: Client.method({
		method: constants.verbs.GET,
		url: '{+homePod}api/platform/tenants/{tenantId}?responseFields={responseFields}'
	})
});

},{"../../client":11}],20:[function(require,module,exports){


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CodeZu.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

var Client = require('../../client'), constants = Client.constants;

module.exports = Client.sub({
	getExtensions: Client.method({
		method: constants.verbs.GET,
		url: '{+tenantPod}api/platform/extensions/?responseFields={responseFields}'
	}),
	updateExtensions: Client.method({
		method: constants.verbs.PUT,
		url: '{+tenantPod}api/platform/extensions/?responseFields={responseFields}'
	})
});

},{"../../client":11}],21:[function(require,module,exports){
'use strict';

var version = require('./version'),
    DEVELOPER = 1,
    ADMINUSER = 2,
    SHOPPER = 4,
    TENANT = 8,
    SITE = 16,
    MASTERCATALOG = 32,
    CATALOG = 64,
    APP_ONLY = 128,
    NONE = 256,
    APP_REQUIRED = 512;

// scopes are not yet in use, but when the services can reflect
// their required scope, here will be all the bitmask constants

// some contexts are always additive

TENANT |= ADMINUSER;
SITE |= TENANT;
MASTERCATALOG |= TENANT;
CATALOG |= MASTERCATALOG;
SHOPPER |= SITE | CATALOG;

module.exports = {
  scopes: {
    APP_REQUIRED: APP_REQUIRED,
    DEVELOPER: DEVELOPER,
    ADMINUSER: ADMINUSER,
    SHOPPER: SHOPPER,
    TENANT: TENANT,
    SITE: SITE,
    MASTERCATALOG: MASTERCATALOG,
    CATALOG: CATALOG,
    APP_ONLY: APP_ONLY,
    NONE: NONE
  },
  verbs: {
    GET: 'GET',
    POST: 'POST',
    PUT: 'PUT',
    DELETE: 'DELETE'
  },
  headerPrefix: 'x-vol-',
  headers: {
    APPCLAIMS: 'app-claims',
    USERCLAIMS: 'user-claims',
    TENANT: 'tenant',
    SITE: 'site',
    MASTERCATALOG: 'master-catalog',
    CATALOG: 'catalog',
    DATAVIEWMODE: 'dataview-mode',
    VERSION: 'version',
    SHA256: 'hmac-sha256'
  },
  dataViewModes: {
    LIVE: 'Live',
    PENDING: 'Pending'
  },
  capabilityTimeoutInSeconds: 180,
  version: version.current
};
},{"./version":44}],22:[function(require,module,exports){
'use strict';

var getUrlTemplate = require('../utils/get-url-template');
var extend = require('../utils/tiny-extend');

function ensureTrailingSlash(url) {
  return url.charAt(url.length - 1) === '/' ? url : url + '/';
}

/**
 * Creates, evaluates based on context, and returns a string URL for a Mozu API request.
 * @param  {Object} context The context of a client. Should have a `baseUrl` property at minimum.
 * @param  {string} tpt     A string to be compiled into a UriTemplate. Should be a valid UriTemplate.
 * @param  {Object} body      An object consisting of the JSON body of the request, to be used to interpolate URL paramters.
 * @return {string}         A fully qualified URL.
 */
module.exports = function () {
  return function (client, tpt, body) {
    var context = client.context;
    var template = getUrlTemplate(tpt);
    var fullTptEvalCtx = extend(
    // aliases for pod URLs and IDs first
    {
      homePod: context.baseUrl,
      pciPod: context.basePciUrl,
      tenantId: context.tenant,
      siteId: context.site,
      catalogId: context.catalog,
      masterCatalogId: context['master-catalog']
    },
    // all context values override those base values if provided
    context,
    // any matching values in the body override last.
    body);

    // ensure all base URLs have trailing slashes.
    ['homePod', 'pciPod', 'tenantPod'].forEach(function (x) {
      if (fullTptEvalCtx[x]) fullTptEvalCtx[x] = ensureTrailingSlash(fullTptEvalCtx[x]);
    });

    // don't pass the API version!
    if (!body || !body.hasOwnProperty("version")) delete fullTptEvalCtx.version;

    return template.render(fullTptEvalCtx);
  };
};
},{"../utils/get-url-template":34,"../utils/tiny-extend":42}],23:[function(require,module,exports){
'use strict';

var assert = require('assert');

function isExpired(ticket) {
  var ungraceperiod = 60000;
  var compareDate = new Date();
  compareDate.setTime(compareDate.getTime() + ungraceperiod);
  return new Date(ticket.refreshTokenExpiration) < compareDate;
}

function generateCacheKey(claimtype, context) {
  var cmps;
  if (!process.env.mozuHosted) {
    assert(context.appKey, "No application key in context!");
    cmps = [context.appKey];
  } else {
    cmps = ['mozuHosted'];
  }
  switch (claimtype) {
    case "developer":
      assert(context.developerAccount && context.developerAccount.emailAddress, "No developer account email address in context!");
      cmps.push(context.developerAccount.emailAddress, context.developerAccountId);
      break;
    case "admin-user":
      assert(context.tenant, "No tenant in context!");
      assert(context.adminUser && context.adminUser.emailAddress, "No admin user email address in context!");
      cmps.push(context.tenant, context.adminUser.emailAddress);
      break;
    default:
      break;
  }
  return cmps.join();
}

module.exports = function InMemoryAuthCache() {
  var claimsCaches = {
    application: {},
    developer: {},
    'admin-user': {}
  };

  return {
    get: function get(claimtype, context, callback) {
      var ticket = claimsCaches[claimtype][generateCacheKey(claimtype, context)];
      setImmediate(function () {
        callback(null, ticket && !isExpired(ticket) && ticket || undefined);
      });
    },
    set: function set(claimtype, context, ticket, callback) {
      claimsCaches[claimtype][generateCacheKey(claimtype, context)] = ticket;
      setImmediate(callback);
    },
    constructor: InMemoryAuthCache
  };
};
},{"assert":undefined}],24:[function(require,module,exports){
'use strict';

var AuthProvider = require('../../security/auth-provider');
var scopes = require('../../constants').scopes;
var getScopeFromState = require('./get-scope-from-state');

/**
 * If necessary, add application claims to a client context before
 * placing a request. Relies on a `scope` parameter to specify.
 * Uses AuthProvider.
 */

module.exports = function (state) {
  var client = state.client;

  var scope = getScopeFromState(state);

  if (scope & scopes.APP_REQUIRED || !(scope & scopes.NONE || scope & scopes.DEVELOPER)) {
    return AuthProvider.addPlatformAppClaims(client).then(function () {
      return state;
    });
  } else {
    return state;
  }
};
},{"../../constants":21,"../../security/auth-provider":30,"./get-scope-from-state":28}],25:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var TenantCache = require('../../utils/tenant-cache');
var EnvUrls = require('mozu-metadata/data/environments.json');
var getUrlTemplate = require('../../utils/get-url-template');
var getScopeFromState = require('./get-scope-from-state');

/**
 * If necessary, transforms a promise for a prepared client into a promise
 * for a client that has a `basePciUrl` in its context.
 * Reads from the TenantCache if necessary, and consumes mozu-metadata.
 */

var PCIUrlsByBaseUrl = Object.keys(EnvUrls).reduce(function (o, c) {
  o[EnvUrls[c].homeDomain] = EnvUrls[c];
  return o;
}, {});

module.exports = function (state) {
  var client = state.client;
  var requestConfig = state.requestConfig;
  var url = requestConfig.url;

  if (~getUrlTemplate(url).keysUsed.indexOf('pciPod') && !client.context.basePciUrl && !client.context.pciPod) {
    var _ret = function () {
      var tenantId = client.context.tenantId || client.context.tenant;
      var pciUrls = PCIUrlsByBaseUrl[client.context.baseUrl];
      if (!tenantId) {
        throw new Error('Could not place request to ' + url + ' because it requires a tenant ' + 'ID to be set in the client context.');
      } else if (!pciUrls) {
        throw new Error('Could not place request to ' + url + ' because it is making a call to ' + 'Payment Service, but there is no known payment service domain ' + ('matching the environment whose base URL is ' + client.context.baseUrl + '.'));
      } else {
        return {
          v: TenantCache.get(tenantId, client, getScopeFromState(state)).then(function (t) {
            if (t.isDevTenant) {
              client.context.basePciUrl = pciUrls.paymentServiceSandboxDomain;
            } else {
              client.context.basePciUrl = pciUrls.paymentServiceTenantPodDomain;
            }
            return state;
          })
        };
      }
    }();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  } else {
    return state;
  }
};
},{"../../utils/get-url-template":34,"../../utils/tenant-cache":41,"./get-scope-from-state":28,"mozu-metadata/data/environments.json":10}],26:[function(require,module,exports){
'use strict';

var TenantCache = require('../../utils/tenant-cache');
var getUrlTemplate = require('../../utils/get-url-template');
var getScopeFromState = require('./get-scope-from-state');

/**
 * If necessary, transforms a promise for a prepared client into a promise
 * for a client that has a `tenantPod` in its context.
 * Reads from the TenantCache if necessary.
 */

module.exports = function (state) {
  var client = state.client;
  var requestConfig = state.requestConfig;
  var url = requestConfig.url;

  if (~getUrlTemplate(url).keysUsed.indexOf('tenantPod') && !client.context.tenantPod) {
    var tenantId = client.context.tenantId || client.context.tenant;
    if (!tenantId) {
      throw new Error('Could not place request to ' + url + ' because it requires a tenant ' + 'ID to be set in the client context.');
    } else {
      return TenantCache.get(tenantId, client, getScopeFromState(state)).then(function (tenant) {
        client.context.tenantPod = 'https://' + tenant.domain + '/';
        return state;
      });
    }
  } else {
    return state;
  }
};
},{"../../utils/get-url-template":34,"../../utils/tenant-cache":41,"./get-scope-from-state":28}],27:[function(require,module,exports){
'use strict';

var AuthProvider = require('../../security/auth-provider');
var scopes = require('../../constants').scopes;
var getScopeFromState = require('./get-scope-from-state');

/**
 * If necessary, add developer user claims to a client context before
 * placing a request. Relies on a `scope` parameter to specify.
 * Uses AuthProvider.
 */

module.exports = function (state) {
  var client = state.client;
  var scope = getScopeFromState(state);

  if (scope & scopes.DEVELOPER) {
    return AuthProvider.addDeveloperUserClaims(client).then(function () {
      return state;
    });
  } else if (scope & scopes.ADMINUSER) {
    return AuthProvider.addAdminUserClaims(client).then(function () {
      return state;
    });
  } else if (!scope && AuthProvider.addMostRecentUserClaims) {
    return AuthProvider.addMostRecentUserClaims(client).then(function () {
      return state;
    });
  } else {
    return state;
  }
};
},{"../../constants":21,"../../security/auth-provider":30,"./get-scope-from-state":28}],28:[function(require,module,exports){
'use strict';

var scopes = require('../../constants').scopes;

/**
 * From a given prerequisite state object (config, options, requestConfig)
 * return scope.
 */

module.exports = function (state) {
  var requestConfig = state.requestConfig;
  var options = state.options;

  if (options && options.scope) {
    if (scopes[options.scope]) {
      return scopes[options.scope];
    } else {
      return options.scope;
    }
  } else {
    return requestConfig.scope;
  }
};
},{"../../constants":21}],29:[function(require,module,exports){
'use strict';
/**
 * Sensible default configuration for a NodeJS, ArcJS, or other server env.
 * Includes assumptions that you'll have access to Tenant Service, etc.
 * Not appropriate for shopper or storefront use.
 */

module.exports = function () {
  return [require('./ensure-tenant-pod-url'), require('./ensure-pci-pod-url'), require('./ensure-user-claims'), require('./ensure-app-claims')];
};
},{"./ensure-app-claims":24,"./ensure-pci-pod-url":25,"./ensure-tenant-pod-url":26,"./ensure-user-claims":27}],30:[function(require,module,exports){
/* eslint handle-callback-err: 0 */
/* global Promise */
'use strict';

var constants = require('../constants'),
    AuthTicket = require('./auth-ticket'),
    scopes = constants.scopes;

var TenantCache = require('../utils/tenant-cache');

// if (typeof Promise !== "function") require('when/es6-shim/Promise.browserify-es6');

function createMemoizedClientFactory(clientPath) {
  var c;
  return function () {
    return (c || (c = require(clientPath))).apply(this, arguments);
  };
}

var makeAppAuthClient = createMemoizedClientFactory('../clients/platform/applications/authTicket');
var makeDeveloperAuthClient = createMemoizedClientFactory('../clients/platform/developer/developerAdminUserAuthTicket');
var makeAdminUserAuthClient = createMemoizedClientFactory('../clients/platform/adminuser/tenantAdminUserAuthTicket');

function cacheDataAndCreateAuthTicket(res) {
  var tenants = res.availableTenants;
  if (tenants) {
    for (var i = 0; i < tenants.length; i++) {
      TenantCache.add(tenants[i]);
    }
  }
  return new AuthTicket(res);
}

function getPlatformAuthTicket(client) {
  return makeAppAuthClient(client).authenticateApp({
    applicationId: client.context.appKey,
    sharedSecret: client.context.sharedSecret
  }, {
    scope: scopes.NONE
  }).then(cacheDataAndCreateAuthTicket);
}

function refreshPlatformAuthTicket(client, ticket) {
  return makeAppAuthClient(client).refreshAppAuthTicket({
    refreshToken: ticket.refreshToken
  }, {
    scope: scopes.NONE
  }).then(cacheDataAndCreateAuthTicket);
}

function getDeveloperAuthTicket(client) {
  return makeDeveloperAuthClient(client).createDeveloperUserAuthTicket(client.context.developerAccount, {
    scope: scopes.NONE
  }).then(cacheDataAndCreateAuthTicket);
}

function refreshDeveloperAuthTicket(client, ticket) {
  return makeDeveloperAuthClient(client).refreshDeveloperAuthTicket(ticket, {
    scope: scopes.NONE
  }).then(cacheDataAndCreateAuthTicket);
}

function getAdminUserAuthTicket(client) {
  return makeAdminUserAuthClient(client).createUserAuthTicket({ tenantId: client.context.tenant }, {
    body: client.context.adminUser,
    scope: constants.scopes.APP_ONLY
  }).then(function (json) {
    client.context.user = json.user;
    return cacheDataAndCreateAuthTicket(json);
  });
}

function refreshAdminUserAuthTicket(client, ticket) {
  return makeAdminUserAuthClient(client).refreshAuthTicket(ticket, {
    scope: constants.scopes.APP_ONLY
  }).then(cacheDataAndCreateAuthTicket);
}

var calleeToClaimType = {
  'addPlatformAppClaims': 'application',
  'addDeveloperUserClaims': 'developer',
  'addAdminUserClaims': 'admin-user'
};

function makeClaimMemoizer(calleeName, requester, refresher, claimHeader) {
  return function (client) {
    var cacheAndUpdateClient = function cacheAndUpdateClient(ticket) {
      return new Promise(function (resolve) {
        client.authenticationStorage.set(calleeToClaimType[calleeName], client.context, ticket, function () {
          client.context[claimHeader] = ticket.accessToken;
          resolve(client);
        });
      });
    };
    var op = new Promise(function (resolve) {
      client.authenticationStorage.get(calleeToClaimType[calleeName], client.context, function (err, ticket) {
        resolve(ticket);
      });
    }).then(function (ticket) {
      if (!ticket) {
        return requester(client).then(cacheAndUpdateClient);
      }
      if (new Date(ticket.accessTokenExpiration) < new Date()) {
        return refresher(client, ticket).then(cacheAndUpdateClient);
      }
      client.context[claimHeader] = ticket.accessToken;
      return client;
    });
    function setRecent() {
      AuthProvider.addMostRecentUserClaims = AuthProvider[calleeName];
    }
    op.then(setRecent, setRecent);
    return op;
  };
}

var AuthProvider = {

  addPlatformAppClaims: makeClaimMemoizer('addPlatformAppClaims', getPlatformAuthTicket, refreshPlatformAuthTicket, constants.headers.APPCLAIMS),
  addDeveloperUserClaims: makeClaimMemoizer('addDeveloperUserClaims', getDeveloperAuthTicket, refreshDeveloperAuthTicket, constants.headers.USERCLAIMS),
  addAdminUserClaims: makeClaimMemoizer('addAdminUserClaims', getAdminUserAuthTicket, refreshAdminUserAuthTicket, constants.headers.USERCLAIMS),
  addMostRecentUserClaims: false
};

module.exports = AuthProvider;
},{"../constants":21,"../utils/tenant-cache":41,"./auth-ticket":31}],31:[function(require,module,exports){
'use strict';

/**
 * The authentication ticket used to authenticate anything.
 * @class AuthTicket
 * @property {string} accessToken The token that stores an encrypted list of the application's configured behaviors and authenticates the application.
 * @property {Date} accessTokenExpiration Date and time the access token expires. After the access token expires, refresh the authentication ticket using the refresh token.
 * @property {string} refreshToken The token that refreshes the application's authentication ticket.
 * @property {Date} refreshTokenExpiration Date and time the refresh token expires. After the refresh token expires, generate a new authentication ticket.
 */

function AuthTicket(json) {
  var self = this;
  if (!(this instanceof AuthTicket)) return new AuthTicket(json);
  for (var p in json) {
    if (json.hasOwnProperty(p)) {
      self[p] = p.indexOf('Expiration') !== -1 ? new Date(json[p]) : json[p]; // dateify the dates, this'll break if the prop name changes
    }
  }
}

module.exports = AuthTicket;
},{}],32:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var extend = require('./tiny-extend');
var util = require('util');
module.exports = function errorify(res, additions) {
  try {
    if (typeof res === "string") {
      return new Error(res);
    }
    var err;
    var message = ensureMessage(res);
    var stringBody = ensureString(res.body);
    var details = _typeof(res.body) === "object" ? res.body : (typeof res === 'undefined' ? 'undefined' : _typeof(res)) === "object" ? res : {};

    if (!message && stringBody) {
      try {
        details = JSON.parse(stringBody);
        message = details.message || stringBody;
      } catch (e) {
        message = stringBody;
      }
    }

    if (additions) {
      extend(details, additions);
    }

    message = (message || "Unknown error!") + formatDetails(details);

    err = new Error(message);
    err.originalError = details;
    return err;
  } catch (e) {
    return e;
  }
};

function formatDetails(deets) {
  return "\n\nDetails:\n" + Object.keys(deets).map(function (label) {
    var deet = deets[label];
    if ((typeof deet === 'undefined' ? 'undefined' : _typeof(deet)) === "object") deet = util.inspect(deet);
    return " " + label + ": " + deet;
  }).join('\n') + '\n';
}

function ensureString(something) {
  if (!something) return String(something);
  if (typeof something === "string") {
    return something;
  }
  if (Buffer.isBuffer(something)) {
    return something.toString('utf-8');
  }
  if (typeof something.toString === "function") {
    return something.toString();
  }
  return String(something);
}

function ensureMessage(res) {
  return res.message || res.body && res.body.message;
}
},{"./tiny-extend":42,"util":undefined}],33:[function(require,module,exports){
'use strict';
// BEGIN INIT

var fs = require('fs');
var findup = require('./tiny-findup');

var legalConfigNames = ['mozu.config', 'mozu.config.json'];

module.exports = function getConfig() {
  var conf;
  if (process.env.mozuHosted) {
    try {
      conf = JSON.parse(process.env.mozuHosted).sdkConfig;
    } catch (e) {
      throw new Error("Mozu hosted configuration was unreadable: " + e.message);
    }
  } else {
    for (var i = legalConfigNames.length - 1; i >= 0; i--) {
      try {
        var filename = findup(legalConfigNames[i]);
        if (filename) conf = fs.readFileSync(filename, 'utf-8');
      } catch (e) {
        continue;
      }
      if (conf) break;
    }
    if (!conf) {
      throw new Error("No configuration file found. Either create a 'mozu.config' or 'mozu.config.json' file, or supply full config to the .client() method.");
    }
    try {
      conf = JSON.parse(conf);
    } catch (e) {
      throw new Error("Configuration file was unreadable: " + e.message);
    }
  }
  return conf;
};
},{"./tiny-findup":43,"fs":undefined}],34:[function(require,module,exports){
'use strict';
/**
 * Memoized function to turn URI Template text strings into Template objects.
 *
 * Assumes that unescaped URI Template variables are required,
 * since they're always base URLs in the current codegen.
 *
 * @param {String} templateText The URI template string.
 * @returns {Template} Object with a `render` method and a `keysUsed` object.
 */

var expRe = /\{.+?\}/g;
var varnameRe = /[\w_-]+/;
function findKeys(rawTpt) {
  var matches = rawTpt.match(expRe);
  if (!matches) return [];
  return matches.map(function (x) {
    return x.match(varnameRe)[0];
  });
}

var uritemplate = require('uri-template');
var cache = {};
module.exports = function (templateText) {
  if (cache[templateText]) {
    return cache[templateText];
  }
  var tpt = uritemplate.parse(templateText);
  return cache[templateText] = {
    render: function render(x) {
      return tpt.expand(x);
    },
    keysUsed: findKeys(templateText)
  };
};
},{"uri-template":47}],35:[function(require,module,exports){
'use strict';

var extend = require('./tiny-extend');
var request = require('./request');

module.exports = function (config) {

  function doRequest(body, options) {
    options = options || {};
    var finalRequestConfig = extend({}, config, this.defaultRequestOptions, {
      url: this.urlResolver(this, config.url, body),
      context: this.context,
      body: body
    }, options);
    var finalMethod = finalRequestConfig.method && finalRequestConfig.method.toUpperCase();

    // this is magic and was never a good idea.
    // the way the SDK was designed, the first argument to a method will get
    // used both as the request payload and as an object to expand the URI
    // template. this resulted in collisions, and in unexpected behavior with
    // services that didn't expect strongly typed payloads. the below code
    // tried to fix it magically, but under certain circumstances it would be
    // very hard to debug.
    //
    // remove any properties from the body that were used to expand the url
    // if (body && 
    //     typeof body === "object" &&
    //     !Array.isArray(body) &&
    //     !options.body && 
    //     !options.includeUrlVariablesInPostBody && 
    //     (finalMethod === "POST" || finalMethod === "PUT")) {
    //   finalRequestConfig.body = Object.keys(body).reduce(function(m, k) {
    //     if (!urlSpec.keysUsed[k]) {
    //       m[k] = body[k];
    //     }
    //     return m;
    //   }, {});
    //   if (Object.keys(finalRequestConfig.body).length === 0) {
    //     delete finalRequestConfig.body;
    //   }
    // }


    if (finalMethod === "GET" || finalMethod === "DELETE" && !options.body) {
      delete finalRequestConfig.body;
      // it's outlived its usefulness, we've already made a url with it
    }
    return request(finalRequestConfig, this.requestTransform);
  }

  return function (body, options) {
    var doThisRequest = doRequest.bind(this, body, options);
    if (process.env.mozuHosted) {
      return doThisRequest();
    } else if (!this.prerequisiteTasks || !Array.isArray(this.prerequisiteTasks)) {
      return Promise.reject(new Error('Could not place request. No `prerequisiteTasks` array found on ' + 'the client object. To require no auth or URL prerequisites, set ' + '`this.prerequisiteTasks = [];` on the client object.'));
    } else {
      return this.prerequisiteTasks.reduce(function (p, t) {
        return p.then(t);
      }, Promise.resolve({
        client: this,
        options: options,
        requestConfig: config
      })).then(doThisRequest);
    }
  };
};
},{"./request":38,"./tiny-extend":42}],36:[function(require,module,exports){
'use strict';

var extend = require('./tiny-extend');

var priorities = {
  'app-claims': ['appClaims'],
  'user-claims': ['userClaims'],
  'tenant': ['tenantId'],
  'site': ['siteId'],
  'master-catalog': ['masterCatalog', 'masterCatalogId'],
  'catalog': ['catalogId'],
  'dataview-mode': ['dataViewMode']
};

var prioritiesKeys = Object.keys(priorities);

module.exports = function (context) {
  var newContext = extend({}, context);
  return prioritiesKeys.reduce(function (ctx, dashKey) {
    return priorities[dashKey].reduce(function (ctx, k) {
      if (k in ctx) {
        ctx[dashKey] = ctx[k];
        delete ctx[k];
      }
      return ctx;
    }, ctx);
  }, newContext);
};
},{"./tiny-extend":42}],37:[function(require,module,exports){
'use strict';

var reISO = /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*))(?:Z|(\+|-)([\d|:]*))?$/;
module.exports = function parseDate(key, value) {
  return typeof value === 'string' && reISO.exec(value) ? new Date(value) : value;
};
},{}],38:[function(require,module,exports){
'use strict';
/* global Promise */

var constants = require('../constants');
var extend = require('./tiny-extend');
var url = require('url');
var protocolHandlers = {
  'http:': require('http'),
  'https:': require('https')
};
var streamToCallback = require('./stream-to-callback');
var parseJsonDates = require('./parse-json-dates');
var errorify = require('./errorify');

var USER_AGENT = 'Mozu Node SDK v' + constants.version + ' (Node.js ' + process.version + '; ' + process.platform + ' ' + process.arch + ')';

/**
 * Handle headers
 */
function makeHeaders(conf, payload) {
  var headers;
  function iterateHeaders(memo, key) {
    if (conf.context[constants.headers[key]]) {
      memo[constants.headerPrefix + constants.headers[key]] = conf.context[constants.headers[key]];
    }
    return memo;
  }
  if (conf.scope && conf.scope & constants.scopes.NONE) {
    headers = {};
  } else if (conf.scope && conf.scope & constants.scopes.APP_ONLY) {
    headers = ['APPCLAIMS'].reduce(iterateHeaders, {});
  } else {
    headers = Object.keys(constants.headers).reduce(iterateHeaders, {});
  }

  if (payload) {
    headers['Content-Length'] = payload.length.toString();
  }

  return extend({
    'Accept': 'application/json',
    'Connection': 'close',
    'Content-Type': 'application/json; charset=utf-8',
    'User-Agent': USER_AGENT
  }, headers, conf.headers || {});
}

/**
 * Make an HTTP request to the Mozu API. This method populates headers based on the scope of the supplied context.
 * @param  {Object} options The request options, to be passed to the `request` module. Look up on NPM for details.
 * @return {Promise<ApiResponse,ApiError>}         A Promise that will fulfill as the JSON response from the API, or reject with an error as JSON from the API.
 */

module.exports = function (options, transform) {
  var conf = extend({}, options);
  conf.method = (conf.method || 'get').toUpperCase();
  var payload;
  if (conf.body) {
    payload = conf.body;
    if (typeof payload !== "string" && !Buffer.isBuffer(payload)) {
      payload = JSON.stringify(payload);
    }
    if (typeof payload === "string") {
      payload = new Buffer(payload);
    }
  }
  conf.headers = makeHeaders(conf, payload);
  var uri = url.parse(conf.url);
  var protocolHandler = protocolHandlers[uri.protocol];
  if (!protocolHandler) {
    throw new Error('Protocol ' + uri.protocol + ' not supported.');
  }
  return new Promise(function (resolve, reject) {
    options = extend({}, options);
    delete options.headers;
    var requestOptions = extend({
      hostname: uri.hostname,
      port: uri.port || (uri.protocol === 'https:' ? 443 : 80),
      method: conf.method,
      path: uri.path,
      headers: conf.headers,
      agent: conf.agent
    }, options);
    if (typeof transform === "function") {
      requestOptions = transform(requestOptions);
    }
    var complete = false;
    var request = protocolHandler.request(requestOptions, function (response) {
      streamToCallback(response, function (err, body) {
        complete = true;
        if (err) return reject(errorify(err, extend({ statusCode: response.statusCode, url: response.req.path }, response.headers)));
        if (body) {
          try {
            if (response.headers["content-type"].indexOf('json') > -1 || response.headers["content-type"].indexOf('text/plain') > -1) body = JSON.parse(body, conf.parseDates !== false && parseJsonDates);
          } catch (e) {
            return reject(new Error('Response was not valid JSON: ' + e.message + '\n\n-----\n' + body));
          }
        }
        if (response && response.statusCode >= 400 && response.statusCode < 600) {
          return reject(errorify(body || response, extend({ statusCode: response.statusCode, url: response.req ? response.req.path : "" }, response.headers)));
        }
        return resolve(body);
      });
    });
    var timeout = options.timeout || 20000;
    request.setTimeout(timeout, function () {
      if (!complete) {
        request.abort();
        reject(errorify("Timeout occurred: request to " + conf.url + " took more than " + timeout / 1000 + " seconds to complete."));
      }
    });
    request.on('error', function (err) {
      reject(errorify(err, request));
    });
    if (payload) request.write(payload);
    request.end();
  });
};
},{"../constants":21,"./errorify":32,"./parse-json-dates":37,"./stream-to-callback":39,"./tiny-extend":42,"http":undefined,"https":undefined,"url":undefined}],39:[function(require,module,exports){
'use strict';

var Stream = require('stream').Transform;

module.exports = function streamToCallback(stream, cb) {
  var buf = new Stream();
  //stream.setEncoding('utf8');
  stream.on('data', function (chunk) {
    buf.push(chunk);
  });
  stream.on('error', cb);
  stream.on('end', function () {
    cb(null, buf.read());
  });
};
},{"stream":undefined}],40:[function(require,module,exports){
'use strict';

var util = require('util'),
    extend = require('./tiny-extend');

/**
 * Subclass a constructor. Like Node's `util.inherits` but lets you pass additions to the prototype, and composes constructors.
 * @param  {Function} cons  The constructor to subclass.
 * @param  {Object} proto Methods to add to the prototype.
 * @return {Function}       The new subclass.
 */
module.exports = function sub(cons, proto) {
    var child = function child() {
        cons.apply(this, arguments);
    };
    util.inherits(child, cons);
    if (proto) extend(child.prototype, proto);
    return child;
};
},{"./tiny-extend":42,"util":undefined}],41:[function(require,module,exports){
'use strict';

var TenantClient = void 0;
var TenantsOrPromisesById = {};

module.exports = {
  add: function add(tenant) {
    TenantsOrPromisesById[tenant.id] = tenant;
  },
  get: function get(tenantId, client, scope) {
    TenantClient = TenantClient || require('../clients/platform/tenant');
    var tenant = TenantsOrPromisesById[tenantId];
    if (tenant) {
      // may not be a promise if it was set en masse by AuthProvider.
      // AuthProvider may set hundreds of tenants at once, so we let it
      // set them directly for performance reasons.
      if (typeof tenant.then !== "function") {
        // and turn them into promises as needed.
        tenant = TenantsOrPromisesById[tenantId] = Promise.resolve(tenant);
      }
      return tenant;
    } else {
      return TenantsOrPromisesById[tenantId] = new TenantClient(client).getTenant(null, { scope: scope });
    }
  }
};
},{"../clients/platform/tenant":19}],42:[function(require,module,exports){
'use strict';

module.exports = function extend(target) {
  return Array.prototype.slice.call(arguments, 1).reduce(function (out, next) {
    if (next && typeof next !== "string") {
      Object.keys(next).forEach(function (k) {
        out[k] = next[k];
      });
    }
    return out;
  }, target);
};
},{}],43:[function(require,module,exports){
'use strict';

var path = require('path');
var fs = require('fs');

module.exports = function findup(filename) {
  var maybeFile = path.resolve(filename),
      dir = process.cwd(),
      last,
      exists;
  while (!(exists = fs.existsSync(maybeFile)) && dir !== last) {
    maybeFile = path.resolve(dir, '..', filename);
    last = dir;
    dir = path.resolve(dir, '..');
  }
  return exists && maybeFile;
};
},{"fs":undefined,"path":undefined}],44:[function(require,module,exports){
'use strict';

module.exports = {
  current: "1.1705.17038.0"
};
},{}],45:[function(require,module,exports){
module.exports = function pctEncode(regexp) {
  regexp = regexp || /\W/g;
  return function encode(string) {
    string = String(string);
    return string.replace(regexp, function (m) {
      var c = m[0].charCodeAt(0)
        , encoded = [];
      if (c < 128) {
        encoded.push(c);
      } else if ((128 <= c && c < 2048)) {
        encoded.push((c >> 6) | 192);
        encoded.push((c & 63) | 128);
      } else {
        encoded.push((c >> 12) | 224);
        encoded.push(((c >> 6) & 63) | 128);
        encoded.push((c & 63) | 128);
      }
      return encoded.map(function (c) {
        return '%' + c.toString(16).toUpperCase();
      }).join('');
    })
  }
}

},{}],46:[function(require,module,exports){
//     Underscore.js 1.9.2
//     https://underscorejs.org
//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = typeof self == 'object' && self.self === self && self ||
            typeof global == 'object' && global.global === global && global ||
            this ||
            {};

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for their old module API. If we're in
  // the browser, add `_` as a global object.
  // (`nodeType` is checked to ensure that `module`
  // and `exports` are not HTML elements.)
  if (typeof exports != 'undefined' && !exports.nodeType) {
    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.9.2';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  var builtinIteratee;

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
    return _.property(value);
  };

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only argCount argument.
  _.iteratee = builtinIteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  var restArguments = function(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var shallowProperty = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  var has = function(obj, path) {
    return obj != null && hasOwnProperty.call(obj, path);
  }

  var deepGet = function(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = shallowProperty('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  var createReduce = function(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (_.isFunction(path)) {
      func = path;
    } else if (_.isArray(path)) {
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return _.map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection.
  _.shuffle = function(obj) {
    return _.sample(obj, Infinity);
  };

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = _.random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (has(result, key)) result[key]++; else result[key] = 1;
  });

  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (_.isString(obj)) {
      // Keep surrogate pair characters together
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null || array.length < 1) return n == null ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, Boolean);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    output = output || [];
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        // Flatten current level of array or arguments object.
        if (shallow) {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        } else {
          flatten(value, shallow, strict, output);
          idx = output.length;
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = restArguments(function(array, otherArrays) {
    return _.difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = restArguments(function(arrays) {
    return _.uniq(flatten(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = restArguments(function(array, rest) {
    rest = flatten(rest, true, true);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  });

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = restArguments(_.unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of _.pairs.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions.
  var createPredicateIndexFinder = function(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  };

  // Returns the first index on an array-like that passes a predicate test.
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions.
  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](https://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  _.chunk = function(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments.
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = restArguments(function(func, context, args) {
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  _.partial = restArguments(function(func, boundArgs) {
    var placeholder = _.partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  _.partial.placeholder = _;

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = restArguments(function(obj, keys) {
    keys = flatten(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = _.bind(obj[key], obj);
    }
  });

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, result;

    var later = function(context, args) {
      timeout = null;
      if (args) result = func.apply(context, args);
    };

    var debounced = restArguments(function(args) {
      if (timeout) clearTimeout(timeout);
      if (immediate) {
        var callNow = !timeout;
        timeout = setTimeout(later, wait);
        if (callNow) result = func.apply(this, args);
      } else {
        timeout = _.delay(later, wait, this, args);
      }

      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = null;
    };

    return debounced;
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  _.restArguments = restArguments;

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  var collectNonEnumProps = function(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  };

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object.
  // In contrast to _.map it returns an object.
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = _.keys(obj),
        length = keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of _.object.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`.
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test.
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Internal pick helper function to determine if `obj` has key `key`.
  var keyInObj = function(value, key, obj) {
    return key in obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (_.isFunction(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = _.allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the blacklisted properties.
  _.omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = _.map(flatten(keys, false, false), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  });

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq, deepEq;
  eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  };

  // Internal recursive comparison function for `isEqual`.
  deepEq = function(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    return _.isNumber(obj) && isNaN(obj);
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, path) {
    if (!_.isArray(path)) {
      return has(obj, path);
    }
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (obj == null || !hasOwnProperty.call(obj, key)) {
        return false;
      }
      obj = obj[key];
    }
    return !!length;
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indexes.
  _.property = function(path) {
    if (!_.isArray(path)) {
      return shallowProperty(path);
    }
    return function(obj) {
      return deepGet(obj, path);
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    if (obj == null) {
      return function(){};
    }
    return function(path) {
      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

  // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  _.result = function(obj, path, fallback) {
    if (!_.isArray(path)) path = [path];
    var length = path.length;
    if (!length) {
      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = _.isFunction(prop) ? prop.call(obj) : prop;
    }
    return obj;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    var render;
    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var chainResult = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_, args));
      };
    });
    return _;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return chainResult(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return chainResult(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return String(this._wrapped);
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define == 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}());

},{}],47:[function(require,module,exports){
module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "uriTemplate": parse_uriTemplate,
        "expression": parse_expression,
        "op": parse_op,
        "pathExpression": parse_pathExpression,
        "paramList": parse_paramList,
        "param": parse_param,
        "cut": parse_cut,
        "listMarker": parse_listMarker,
        "substr": parse_substr,
        "nonexpression": parse_nonexpression,
        "extension": parse_extension
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "uriTemplate";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_uriTemplate() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        result0 = [];
        result1 = parse_nonexpression();
        if (result1 === null) {
          result1 = parse_expression();
        }
        while (result1 !== null) {
          result0.push(result1);
          result1 = parse_nonexpression();
          if (result1 === null) {
            result1 = parse_expression();
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, pieces) { return new Template(pieces) })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_expression() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 123) {
          result0 = "{";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_op();
          if (result1 !== null) {
            result2 = parse_paramList();
            if (result2 !== null) {
              if (input.charCodeAt(pos) === 125) {
                result3 = "}";
                pos++;
              } else {
                result3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, op, params) { return expression(op, params) })(pos0, result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_op() {
        var result0;
        
        if (/^[\/;:.?&+#]/.test(input.charAt(pos))) {
          result0 = input.charAt(pos);
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\/;:.?&+#]");
          }
        }
        if (result0 === null) {
          result0 = "";
        }
        return result0;
      }
      
      function parse_pathExpression() {
        var result0;
        
        if (input.substr(pos, 2) === "{/") {
          result0 = "{/";
          pos += 2;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"{/\"");
          }
        }
        return result0;
      }
      
      function parse_paramList() {
        var result0, result1, result2, result3;
        var pos0, pos1, pos2, pos3;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_param();
        if (result0 !== null) {
          result1 = [];
          pos2 = pos;
          pos3 = pos;
          if (input.charCodeAt(pos) === 44) {
            result2 = ",";
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("\",\"");
            }
          }
          if (result2 !== null) {
            result3 = parse_param();
            if (result3 !== null) {
              result2 = [result2, result3];
            } else {
              result2 = null;
              pos = pos3;
            }
          } else {
            result2 = null;
            pos = pos3;
          }
          if (result2 !== null) {
            result2 = (function(offset, p) { return p; })(pos2, result2[1]);
          }
          if (result2 === null) {
            pos = pos2;
          }
          while (result2 !== null) {
            result1.push(result2);
            pos2 = pos;
            pos3 = pos;
            if (input.charCodeAt(pos) === 44) {
              result2 = ",";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_param();
              if (result3 !== null) {
                result2 = [result2, result3];
              } else {
                result2 = null;
                pos = pos3;
              }
            } else {
              result2 = null;
              pos = pos3;
            }
            if (result2 !== null) {
              result2 = (function(offset, p) { return p; })(pos2, result2[1]);
            }
            if (result2 === null) {
              pos = pos2;
            }
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, hd, rst) { rst.unshift(hd); return rst; })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_param() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = [];
        if (/^[a-zA-Z0-9_.%]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[a-zA-Z0-9_.%]");
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (/^[a-zA-Z0-9_.%]/.test(input.charAt(pos))) {
            result1 = input.charAt(pos);
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("[a-zA-Z0-9_.%]");
            }
          }
        }
        if (result0 !== null) {
          result1 = parse_cut();
          if (result1 === null) {
            result1 = parse_listMarker();
          }
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result2 = parse_extension();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars, clm, e) { clm = clm || {};
              return {
              name: chars.join(''),
              explode: clm.listMarker,
              cut: clm.cut,
              extended: e
            } })(pos0, result0[0], result0[1], result0[2]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_cut() {
        var result0;
        var pos0;
        
        pos0 = pos;
        result0 = parse_substr();
        if (result0 !== null) {
          result0 = (function(offset, cut) { return {cut: cut}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_listMarker() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 42) {
          result0 = "*";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset, listMarker) { return {listMarker: listMarker}; })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_substr() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 58) {
          result0 = ":";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\":\"");
          }
        }
        if (result0 !== null) {
          if (/^[0-9]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[0-9]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[0-9]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[0-9]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, digits) { return parseInt(digits.join('')) })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_nonexpression() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[^{]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[^{]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[^{]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[^{]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return chars.join(''); })(pos0, result0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_extension() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          if (/^[^)]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^)]");
            }
          }
          if (result2 !== null) {
            result1 = [];
            while (result2 !== null) {
              result1.push(result2);
              if (/^[^)]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[^)]");
                }
              }
            }
          } else {
            result1 = null;
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 41) {
              result2 = ")";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, chars) { return chars.join('') })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
          var cls = require('./lib/classes')
          var Template = cls.Template
          var expression = cls.expression
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();

},{"./lib/classes":48}],48:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var FormContinuationExpression, FormStartExpression, FragmentExpression, LabelExpression, NamedExpression, PathParamExpression, PathSegmentExpression, ReservedExpression, SimpleExpression, Template, encoders, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  encoders = require('./encoders');

  Template = Template = (function() {
    function Template(pieces) {
      /*
      :param pieces: An array of strings and expressions in the order they appear in the template.
      */

      var i,
        _this = this;
      this.expressions = [];
      this.prefix = 'string' === typeof pieces[0] ? pieces.shift() : '';
      i = 0;
      pieces.forEach(function(p) {
        switch (typeof p) {
          case 'object':
            return _this.expressions[i++] = p;
          case 'string':
            return _this.expressions[i - 1].suffix = p;
        }
      });
    }

    Template.prototype.expand = function(vars) {
      return this.prefix + this.expressions.map(function(expr) {
        return expr.expand(vars);
      }).join('');
    };

    Template.prototype.toString = function() {
      return this.prefix + this.expressions.join('');
    };

    Template.prototype.toJSON = function() {
      return this.toString();
    };

    return Template;

  })();

  SimpleExpression = (function() {
    var definedPairs;

    SimpleExpression.prototype.first = "";

    SimpleExpression.prototype.sep = ",";

    SimpleExpression.prototype.named = false;

    SimpleExpression.prototype.empty = "";

    SimpleExpression.prototype.allow = "U";

    function SimpleExpression(params) {
      this.params = params;
      this.explodeObject = __bind(this.explodeObject, this);
      this.explodeArray = __bind(this.explodeArray, this);
      this._expandPair = __bind(this._expandPair, this);
      this.stringifySingle = __bind(this.stringifySingle, this);
      this.encode = __bind(this.encode, this);
      if (this.params == null) {
        this.params = [];
      }
      this.suffix = '';
    }

    SimpleExpression.prototype.encode = function(string) {
      /*
      Encode a string value for the URI
      */

      return encoders[this.allow](string);
    };

    SimpleExpression.prototype.stringifySingle = function(param, value) {
      /*
      Encode a single value as a string
      */

      var k, type, v;
      type = typeof value;
      if (type === 'string' || type === 'boolean' || type === 'number') {
        value = value.toString();
        return this.encode(value.substring(0, param.cut || value.length));
      } else if (Array.isArray(value)) {
        if (param.cut) {
          throw new Error("Prefixed Values do not support lists. Check " + param.name);
        }
        return value.map(this.encode).join(',');
      } else {
        if (param.cut) {
          throw new Error("Prefixed Values do not support maps. Check " + param.name);
        }
        return ((function() {
          var _results;
          _results = [];
          for (k in value) {
            v = value[k];
            _results.push([k, v].map(this.encode).join(','));
          }
          return _results;
        }).call(this)).join(',');
      }
    };

    SimpleExpression.prototype.expand = function(vars) {
      var defined, expanded,
        _this = this;
      defined = definedPairs(this.params, vars);
      expanded = defined.map(function(pair) {
        return _this._expandPair.apply(_this, pair);
      }).join(this.sep);
      if (expanded) {
        return this.first + expanded + this.suffix;
      } else {
        if (this.empty && defined.length) {
          return this.empty + this.suffix;
        } else {
          return this.suffix;
        }
      }
    };

    definedPairs = function(params, vars) {
      /*
      Return an array of [key, value] arrays where ``key`` is a parameter name
      from ``@params`` and ``value`` is the value from vars, when ``value`` is
      neither undefined nor an empty collection.
      */

      var _this = this;
      return params.map(function(p) {
        return [p, vars[p.name]];
      }).filter(function(pair) {
        var k, v, vv;
        v = pair[1];
        switch (typeof v) {
          case "undefined":
            return false;
          case "object":
            if (Array.isArray(v)) {
              v.length > 0;
            }
            for (k in v) {
              vv = v[k];
              if (vv) {
                return true;
              }
            }
            return false;
          default:
            return true;
        }
      });
    };

    SimpleExpression.prototype._expandPair = function(param, value) {
      /*
      Return the expanded string form of ``pair``.
      
      :param pair: A ``[param, value]`` tuple.
      */

      var name;
      name = param.name;
      if (param.explode) {
        if (Array.isArray(value)) {
          return this.explodeArray(param, value);
        } else if (typeof value === 'string') {
          return this.stringifySingle(param, value);
        } else {
          return this.explodeObject(value);
        }
      } else {
        return this.stringifySingle(param, value);
      }
    };

    SimpleExpression.prototype.explodeArray = function(param, array) {
      return array.map(this.encode).join(this.sep);
    };

    SimpleExpression.prototype.explodeObject = function(object) {
      var k, pairs, v, vv, _i, _len;
      pairs = [];
      for (k in object) {
        v = object[k];
        k = this.encode(k);
        if (Array.isArray(v)) {
          for (_i = 0, _len = v.length; _i < _len; _i++) {
            vv = v[_i];
            pairs.push([k, this.encode(vv)]);
          }
        } else {
          pairs.push([k, this.encode(v)]);
        }
      }
      return pairs.map(function(pair) {
        return pair.join('=');
      }).join(this.sep);
    };

    SimpleExpression.prototype.toString = function() {
      var params;
      params = this.params.map(function(p) {
        return p.name + p.explode;
      }).join(',');
      return "{" + this.first + params + "}" + this.suffix;
    };

    SimpleExpression.prototype.toJSON = function() {
      return this.toString();
    };

    return SimpleExpression;

  })();

  NamedExpression = (function(_super) {
    __extends(NamedExpression, _super);

    function NamedExpression() {
      this.explodeArray = __bind(this.explodeArray, this);
      this.stringifySingle = __bind(this.stringifySingle, this);
      _ref = NamedExpression.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    /*
    A NamedExpression uses name=value expansions in most cases
    */


    NamedExpression.prototype.stringifySingle = function(param, value) {
      value = (value = NamedExpression.__super__.stringifySingle.apply(this, arguments)) ? "=" + value : this.empty;
      return "" + param.name + value;
    };

    NamedExpression.prototype.explodeArray = function(param, array) {
      var _this = this;
      return array.map(function(v) {
        return "" + param.name + "=" + (_this.encode(v));
      }).join(this.sep);
    };

    return NamedExpression;

  })(SimpleExpression);

  ReservedExpression = (function(_super) {
    __extends(ReservedExpression, _super);

    function ReservedExpression() {
      _ref1 = ReservedExpression.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    ReservedExpression.prototype.encode = function(string) {
      return encoders['U+R'](string);
    };

    ReservedExpression.prototype.toString = function() {
      return '{+' + (ReservedExpression.__super__.toString.apply(this, arguments)).substring(1);
    };

    return ReservedExpression;

  })(SimpleExpression);

  FragmentExpression = (function(_super) {
    __extends(FragmentExpression, _super);

    function FragmentExpression() {
      _ref2 = FragmentExpression.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    FragmentExpression.prototype.first = '#';

    FragmentExpression.prototype.empty = '#';

    FragmentExpression.prototype.encode = function(string) {
      return encoders['U+R'](string);
    };

    return FragmentExpression;

  })(SimpleExpression);

  LabelExpression = (function(_super) {
    __extends(LabelExpression, _super);

    function LabelExpression() {
      _ref3 = LabelExpression.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    LabelExpression.prototype.first = '.';

    LabelExpression.prototype.sep = '.';

    LabelExpression.prototype.empty = '.';

    return LabelExpression;

  })(SimpleExpression);

  PathSegmentExpression = (function(_super) {
    __extends(PathSegmentExpression, _super);

    function PathSegmentExpression() {
      _ref4 = PathSegmentExpression.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    PathSegmentExpression.prototype.first = '/';

    PathSegmentExpression.prototype.sep = '/';

    return PathSegmentExpression;

  })(SimpleExpression);

  PathParamExpression = (function(_super) {
    __extends(PathParamExpression, _super);

    function PathParamExpression() {
      _ref5 = PathParamExpression.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    PathParamExpression.prototype.first = ';';

    PathParamExpression.prototype.sep = ';';

    return PathParamExpression;

  })(NamedExpression);

  FormStartExpression = (function(_super) {
    __extends(FormStartExpression, _super);

    function FormStartExpression() {
      _ref6 = FormStartExpression.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    FormStartExpression.prototype.first = '?';

    FormStartExpression.prototype.sep = '&';

    FormStartExpression.prototype.empty = '=';

    return FormStartExpression;

  })(NamedExpression);

  FormContinuationExpression = (function(_super) {
    __extends(FormContinuationExpression, _super);

    function FormContinuationExpression() {
      _ref7 = FormContinuationExpression.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    FormContinuationExpression.prototype.first = '&';

    return FormContinuationExpression;

  })(FormStartExpression);

  module.exports = {
    Template: Template,
    SimpleExpression: SimpleExpression,
    NamedExpression: NamedExpression,
    ReservedExpression: ReservedExpression,
    FragmentExpression: FragmentExpression,
    LabelExpression: LabelExpression,
    PathSegmentExpression: PathSegmentExpression,
    PathParamExpression: PathParamExpression,
    FormStartExpression: FormStartExpression,
    FormContinuationExpression: FormContinuationExpression,
    expression: function(op, params) {
      var cls;
      cls = (function() {
        switch (op) {
          case '':
            return SimpleExpression;
          case '+':
            return ReservedExpression;
          case '#':
            return FragmentExpression;
          case '.':
            return LabelExpression;
          case '/':
            return PathSegmentExpression;
          case ';':
            return PathParamExpression;
          case '?':
            return FormStartExpression;
          case '&':
            return FormContinuationExpression;
        }
      })();
      return new cls(params);
    }
  };

}).call(this);

},{"./encoders":49}],49:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var pctEncode;

  pctEncode = require('pct-encode');

  exports["U"] = pctEncode(/[^\w~.-]/g);

  exports["U+R"] = pctEncode(/[^\w.~:\/\?#\[\]@!\$&'()*+,;=%-]|%(?!\d\d)/g);

}).call(this);

},{"pct-encode":45}]},{},[4])(4)
});
